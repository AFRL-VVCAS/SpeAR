= Summary =

This file gives some description about how procedure definitions and invocations in spear will be translated to Lustre.
In spear, procedure definitions are defined declaratively as functions and procedure invocations are functional.
Procedure definitions will be translated to Lustre nodes that define a relation between input, output, and local variables.
We will call the local variables lifted to a procedure signature "hidden arguments".
Procedures translated to Lustre nodes will always return a boolean.
The boolean indicates whether or not the input, output, and local variables are defined as with the relation.
Thus, we want each translated procedure to always return true.
A new formula will be created for each invocation asserting some tuple of input,output, and local arguments are within the relationship defined by the procedure.
These formulas will be called "hidden requirements" and will be added to the requirements for the procedure.


= Procedures Definitions = 

Spear procedures are defined in spear files.
A spear file may only define one procedure.
A spear file that defines a procedure will contain a production beginning with the keyword 'procedure'.
A spear file that does not contain such a production is a definition file and may only define constants, macros, types, and units.
The signature (name, inputs, input types, outputs, and output types) of the procedure is defined in two pieces.
All variables are declared in the state section of a spear file.
Variable declarations consist of a name, type and possibly, a unit.
The procedure name is declared with the the procedure production.
References to state variables in the input or return portion of the procedure production associate types/units with inputs and outputs arguments.

= Procedure Definition Translation to Lustre =

Procedures defined in spear will be translated into Lustre nodes that calculate relationship within a set.
Specifically, all input, output, and local variables will be lifted to the signature of the translated node.
For example, suppose we have the partial procedure specification:
...
procedure f(in_1,...,in_l) returns output (out);
State:
local_1 : t_1;
...
local_m : t_m;
in_1 : t_{m+1};
...
in_l : t_{m+l};
out : t_{m+l+1};
...

This will be translated to a Lustre node like:
node f(in_1:t_{m+1},...,in_l:t_{m+1},out:t_{m+l+1},local_1:t_1,...,local_m:t_m) return (ctx:bool);

The order of the arguments goes as follows: first are input variables, then come output variables, and finally there are the local variables.
Input and output arguments appear in the translation in the order they appeared in the production beginning with the keyword 'procedure'.
The order of local arguments is irrelevant as the will simply be lifted transitively up to the root procedure of the specification.
As will be detailed, the local arguments may grow according to procedure invocations within the procedure requirements or properties.
The return value of the node will be a single boolean value that is the conjunction of all requirements and hidden requirements for the procedure.
Hidden requirements are produced for each procedure invocation to ensure the arguments to the procedure define a relation.
Therefore, all node invocations must be true for output to be defined according to the requirements of the invoked procedure.

Procedure invocations within procedures must be handled specially because of this translation.
A fresh variable will be mapped to each procedure invocation with a procedure.
These fresh variables will be used to capture the value returned by a invocation and will be lifted to the procedure signature.
Each invocation will translate to a separate boolean formula in the translated procedure.
These formulas will be treated as hidden requirements.

= Procedure Invocations =

Procedure invocation in spear resembles a standard function invocation in any other standard programming language.

= Procedure Invocation Translation to Lustre = 

Procedure invocation will cause all ancestor procedures to accumulate fresh local variables implicitly which will be translated to hidden arguments.
Input arguments used for procedure invocation will be translated to input arguments for the node invocation.
The output variable will follow the input arguments during node translation.
The final arguments to a node invocation translated from a procedure invocation will be all the locals.

The return value of a translated procedure invocation will always be a boolean.
Furthermore, every invocation must be verified as true if the output is expected to be computed as the procedure was defined.
When the translated procedure invocation returns true then we know the tuple consisting first of input values, then of output values, and finally local values is in the set of values defined by the procedure.
 

