+ 12/11/2013 - Unit checking is not complete. For instance, if statements seem
to not be properly unit checked.
	- FIXED - 12/20/2013. The unit checking method for if expressions was
	missing a recursive unit check against the test expression.

+ 12/11/2013 - Cyclic types do not seem to be working as I expect they should.
Consider a simple type like "foo : foo". I suspect units are broken as well.
	- WORKSFORME - 12/23/2012 - I cannot seem to recreate this problem. 

+ 12/20/2013 - Adding the qualified name feature has broken enumerated types and
likely has broken structures.
	- WORKSFORME - 12/20/2013. The default scoping for xtext would not include
	the type of use of enumerated types that we would like. The default scope
	was 'extended' to include enumerations at the top level. Additionally, to 
	disambiguate record access from qualified names, a '->' will now be used.
	
+ 01/02/2014 - Procedures should support multiple outputs.
	- WILLNOTFIX - 01/13/2014. As long as the variant of Lustre that jkind 
	supports does not support tuples, procedures with multiple outputs will be
	unusable. A work around is to create a structure to hold multiple values 
	which must be returned.

+ 01/14/2014 - There is no check for recursive procedure calls.
	- FIXED - 2/11/2014. Added a validation method that will detect cyclic 
	procedure invocations. Unfortunately, due to the way xtext is design only
	the root procedure (with respect to where the method was initiated) can be 
	highlighted.

+ 01/16/2014 - There is no check for multiple uses of the same variable in a 
procedure signature.
	- FIXED - 2/11/2014. Added a validation to highlight all a procedure if its
	signature contains duplicate uses of a variable.
	 
+ 01/20/2014 - There is no check for cyclic imports. I am not entirely sure that 
such checks are necessary.

+ 01/21/2014 - If you input an enumerated type, it will not import the 
enumerations by default. Those must be imported as well. To do this generally
I will need to find all imported enumeration types.

+ 01/21/2014 - Translation of specifications with a callgraph depth greater
than two is broken.
	- FIXED - ??/??/2014 - This was corrected but I forgot to document this 
	here.

+ 01/30/2014 - Output variables can be used without being declared. This will 
cause a null exception when jkind converts the file to a string.
	- WORKSFORME - 2/11/2014. Cannot reproduce issue.

+ 01/31/2014 - Enumerated types need to be ranges, so that their integer values
are properly bound.
	- WORKSFORME - 1/31/2014. A fix was put in place.
	
+ 02/04/2014 - The SpecDSLErrorPrinter class is suppose to aid in printing out
meaningful error messages using the concrete syntax of the language. It does
not handle all cases of the language.

+ 02/26/2014 - There are a number of type checking and semantic checks that are 
not done currently. Hopefully, most of these places have been noted with an XXX
comment.

+ 02/26/2014 - There is a problem in my treatment of burying pres. Specifically, 
we can end up with sequences likes true -> true -> false which is equivalent to 
true -> false.

	- WORKSFORME - 03/05/2014 - I have fixed this issue. It was a result of two
	misunderstandings on my part. Firstly, the expression  " x -> y " should be
	interpreted as "if we are in the initial step, this expression has the value
	x, otherwise it has the value y." I had some idea that the expression 
	" x -> y -> z " meant something like "at the initial step this expression 
	has the value x, at the second step this expression has the value y, and all
	other steps it has the value z." This is incorrect. Secondly, I am
	automatically adding initial values of true to top-level expression in 
	requirements and properties that use the pre operator. Originally, I did 
	this outside the pattern nodes. However, this does not semantically mean
	what I intended. Consider the lustre expression "true -> GA(x)" where GA is
	a node that implements the "globally always" pattern. The problem with this 
	expression is that after the initial step, historically, x could have been 
	false on the initial step.

+ 04/16/2014 - Types must be ordered in the type list in topological order.
	- WORKSFORME - 04/30/2014 - Types should now outputed in topological order.

+ 04/16/2014 - Currently, type definitions are only included if there is some
expression that uses them.

+ 04/16/2014 - Currently, a quantified variable cannot be used as the domain 
for another quantification expression.
	- WORKSFOR ME - 04/30/2014 - It should now be possible to nest quantified
	expression arbitrarily deep and use the variables as domains provided they
	have the correct type.

+ 04/16/2014 - It should be permissible for integers and enumerated types to be
used interchangeably.
	- WORKSFORME - 4/30/2014 - Enumerated types, Integers, and Integer subranges
	should all be interchangeable. However, we 

+ 04/30/2014 - Types within a procedure will be in topological order and 
procedures will be translated in topological order. However, definitions are
not translated. This should be fixed.

