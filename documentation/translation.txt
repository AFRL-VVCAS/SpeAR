This document tries to capture details related to how SPEAR specifications are translated into Lustre programs.
The resulting Lustre programs are specially constructed to facilitate analysis of SPEAR Specifications as Lustre programs via jkind.
Translation will only be done on SPEAR specifications that have passed the semantic validation stage.

In procedure.txt, a sense of how procedure definitions and invocations are translated Lustre Nodes and Node invocations is given.
There are two important details to note about translation.
Firstly, translated procedures (also referred to as nodes) define relations between inputs, outputs, and locals over a set of constraints defined as formulas.
These three types of arguments, provided as input, are only in the relation if the node returns true.
Observe that this is different from the functional way they are declared and invoked in SPEAR specifications.
Secondly, and related, is that for each procedure invocation all "locals"(that is, those passed as parameters) exposed after translation must be exposed in the calling procedures argument list after translation.
SPEAR procedure invocation graphs must be acyclic.
Therefore, this strategy for translation will terminate.

= Monolithic Translation = 

The strategy for procedure translation described above dictates the control-flow for full SPEAR specification translation.
That is, invoked procedures must be translated before calling invocations.
Therefore, translation will occur in a bottom-up fashion with respect to the procedure invocation graph.



We need to construct

