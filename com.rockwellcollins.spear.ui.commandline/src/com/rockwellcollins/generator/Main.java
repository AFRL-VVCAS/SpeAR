/*
 * generated by Xtext
 */
package com.rockwellcollins.generator;

import java.nio.file.Paths;
import java.util.List;


import org.eclipse.core.runtime.Path;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
import com.rockwellcollins.spear.Definitions;
import com.rockwellcollins.spear.File;
import com.rockwellcollins.spear.Specification;
import com.rockwellcollins.spear.preferences.PreferencesUtil;
import com.rockwellcollins.spear.translate.intermediate.SpearDocument;
import com.rockwellcollins.spear.translate.master.SProgram;
import com.rockwellcollins.spear.typing.SpearTypeChecker;
import com.rockwellcollins.spear.units.SpearUnitChecker;

import jkind.lustre.Program;

import com.beust.jcommander.Parameter;


public class Main {

	public static void main(String[] args) {
		if (args.length==0) {
			System.err.println("Aborting: no path to EMF resource provided!");
			return;
		}
		Injector injector = new com.rockwellcollins.SpearStandaloneSetup().createInjectorAndDoEMFRegistration();
		Main main = injector.getInstance(Main.class);
		main.runGenerator(args[0]);
	}
	
	@Inject 
	private Provider<ResourceSet> resourceSetProvider;
	
	@Inject
	private IResourceValidator validator;
	
	//@Inject
	//private IGenerator generator;
	
	//@Inject 
	//private JavaIoFileSystemAccess fileAccess;

	protected void runGenerator(String string) {

		// Load the resource using an absolute path. If an absolute path is not used
	  // calls to Utilities.getImportedFile may fail.
		ResourceSet set = resourceSetProvider.get();
		if(!Paths.get(string).isAbsolute()) {
		  string = Paths.get("").toAbsolutePath() + java.io.File.separator + string;
		}
		Resource resource = set.getResource(URI.createFileURI(string), true);
		// validate the resource
		List<Issue> list = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		if (!list.isEmpty()) {
			for (Issue issue : list) {
				System.err.println(issue);
			}
			return;
		}
		EObject eo = resource.getAllContents().next();
		if(SpearTypeChecker.ERROR != SpearTypeChecker.typeCheck(eo)) {
		  System.out.println("Type checked Eobject: " + eo.toString());
		} else {
		  System.out.println("Failed to Type checked Eobject: " + eo.toString());
		}
    SpearUnitChecker.unitCheck(eo);
    System.out.println("Unit checked Eobject: " + eo.toString());
    
    File f = (File) eo;

    Specification specification = null;
    if (f instanceof Definitions) {
      System.out.println("Cannot analysze a Definitions file" + eo.toString());
      return;
    } else {
      specification = (Specification) f;
    }
    
    SpearDocument workingCopy = new SpearDocument(specification);
    workingCopy.transform();
    
    SProgram program = SProgram.build(workingCopy);
    Program p = program.getLogicalConsistency();
        
    if(PreferencesUtil.getFinalLustreFileOption()) {
      //WorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
      
      //create the generated folder
      //URI folderURI = ActionUtilities.createFolder(state.getURI(), "generated");
      //ActionUtilities.makeFolder(root.getFolder(new Path(folderURI.toPlatformString(true))));
      
      //create the lustre file
      //String filename = ActionUtilities.getGeneratedFile(state.getURI(), "lus");
      //URI lustreURI = ActionUtilities.createURI(folderURI, filename);         
      //IResource finalResource = root.getFile(new Path(lustreURI.toPlatformString(true)));
      //ActionUtilities.printResource(finalResource, p.toString());
      
      // refresh the workspace
      //root.refreshLocal(IResource.DEPTH_INFINITE, null);
    }
	}
}
