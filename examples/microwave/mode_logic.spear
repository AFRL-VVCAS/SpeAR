Relation microwave.mode_logic;

Uses microwave.definitions.*;
Uses microwave.definitions.mode_type;
Uses microwave.definitions.mode_type.*;
Uses microwave.math.utils.monotonically_decreasing.*;
Uses microwave.math.utils.equals.*;
Uses microwave.definitions.modelogic_output_type;
Uses microwave.definitions.modelogic_output_type.*;

Inputs:
	clear : bool;
	start : bool;
	door_closed : bool;
	seconds_to_cook : int;
Outputs:
	output : modelogic_output_type;

State:
	seconds_remaining : int;
	mode : mode_type;


	
Requirements:
	a0 = global :: always (seconds_to_cook >= 0);

	r0 = initial :: (mode == SETUP) and (seconds_remaining == 0);
	
	r1 = global :: always ((pre mode == SETUP) and (not start or clear or seconds_to_cook <= 0)) implies (mode == SETUP);
	r2 = global :: always ((pre mode == SETUP) and (start and not clear and door_closed and seconds_to_cook > 0)) implies ((mode == COOKING) and (seconds_remaining == seconds_to_cook));  
	r3 = global :: always ((pre mode == SETUP) and (start and not clear and not door_closed and seconds_to_cook > 0)) implies ((mode == SUSPENDED) and (seconds_remaining == seconds_to_cook));
	
	r4 = global :: always ((pre mode == COOKING) and (door_closed and not clear and seconds_remaining > 0)) implies ((mode == COOKING) and seconds_remaining == pre seconds_remaining - 1);
	r5 = global :: always ((pre mode == COOKING) and (not door_closed or clear and (seconds_remaining > 0))) implies (mode == SUSPENDED);
	r6 = global :: always ((pre mode == COOKING) and (seconds_remaining <= 0)) implies (mode == SETUP);
	
	r7 = global :: always ((pre mode == SUSPENDED) and (not start or not door_closed and not clear)) implies (( mode == SUSPENDED ) and (seconds_remaining == pre seconds_remaining));
	r8 = global :: always ((pre mode == SUSPENDED) and (start and door_closed and not clear)) implies (mode == COOKING);
	r9 = global :: always ((pre mode == SUSPENDED) and clear) implies (mode == SETUP);
	
	r10 = global :: always (output == new modelogic_output_type {mode = mode, seconds_remaining = seconds_remaining});
	
Properties:
	p1 = while (mode == COOKING) :: always door_closed;
	p2 = while ((mode == COOKING) and (mode == SUSPENDED)) :: always (seconds_remaining <= pre seconds_remaining);
	
	h3 = before start :: always (mode == SETUP);
	p3 = before start :: always (mode <> COOKING);
