/*
 * generated by Xtext
 */
package com.rockwellcollins.formatting;

import com.google.inject.Inject;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import com.rockwellcollins.services.SpearGrammarAccess;

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class SpearFormatter extends AbstractDeclarativeFormatter {
	
	@Inject
	private SpearGrammarAccess g; 
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		c.setAutoLinewrap(120);
		
		c.setLinewrap(0, 1, 2).before(g.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(g.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(g.getML_COMMENTRule());
		
		c.setLinewrap(2).after(g.getSpecificationAccess().getNameIDTerminalRuleCall_1_0());
		
		c.setLinewrap().after(g.getSpecificationAccess().getImportsKeyword_2_0());
		c.setIndentationIncrement().after(g.getSpecificationAccess().getImportsKeyword_2_0());
		c.setLinewrap().after(g.getImportRule());
		c.setIndentationDecrement().after(g.getSpecificationAccess().getImportsImportParserRuleCall_2_1_0());
		c.setLinewrap(2).after(g.getSpecificationAccess().getImportsImportParserRuleCall_2_1_0());
		
		c.setLinewrap().after(g.getSpecificationAccess().getUnitsKeyword_3_0());
		c.setIndentationIncrement().after(g.getSpecificationAccess().getUnitsKeyword_3_0());
		c.setLinewrap().after(g.getUnitDefRule());
		c.setIndentationDecrement().after(g.getSpecificationAccess().getUnitsUnitDefParserRuleCall_3_1_0());
		c.setLinewrap(2).after(g.getSpecificationAccess().getUnitsUnitDefParserRuleCall_3_1_0());
		
		c.setLinewrap().after(g.getSpecificationAccess().getTypesKeyword_4_0());
		c.setIndentationIncrement().after(g.getSpecificationAccess().getTypesKeyword_4_0());
		c.setLinewrap().after(g.getTypeDefRule());
		c.setIndentationDecrement().after(g.getSpecificationAccess().getTypedefsTypeDefParserRuleCall_4_1_0());
		c.setLinewrap(2).after(g.getSpecificationAccess().getTypedefsTypeDefParserRuleCall_4_1_0());
		
		c.setLinewrap().after(g.getSpecificationAccess().getConstantsKeyword_5_0());
		c.setIndentationIncrement().after(g.getSpecificationAccess().getConstantsKeyword_5_0());
		c.setLinewrap().after(g.getConstantRule());
		c.setIndentationDecrement().after(g.getSpecificationAccess().getConstantsConstantParserRuleCall_5_1_0());
		c.setLinewrap(2).after(g.getSpecificationAccess().getConstantsConstantParserRuleCall_5_1_0());
		
		//this works for all variable definitions in Inputs, Outputs, and State
		c.setLinewrap().after(g.getVariableRule());
		
		c.setLinewrap().after(g.getSpecificationAccess().getInputsKeyword_7());
		c.setIndentationIncrement().after(g.getSpecificationAccess().getInputsKeyword_7());
		c.setIndentationDecrement().after(g.getSpecificationAccess().getInputsVariableParserRuleCall_8_0());
		c.setLinewrap(2).after(g.getSpecificationAccess().getInputsVariableParserRuleCall_8_0());
		
		c.setLinewrap().after(g.getSpecificationAccess().getOutputsKeyword_9());
		c.setIndentationIncrement().after(g.getSpecificationAccess().getOutputsKeyword_9());
		c.setIndentationDecrement().after(g.getSpecificationAccess().getOutputsVariableParserRuleCall_10_0());
		c.setLinewrap(2).after(g.getSpecificationAccess().getOutputsVariableParserRuleCall_10_0());		
		
		c.setLinewrap().after(g.getSpecificationAccess().getStateKeyword_11_0());
		c.setIndentationIncrement().after(g.getSpecificationAccess().getStateKeyword_11_0());
		c.setIndentationDecrement().after(g.getSpecificationAccess().getStateVariableParserRuleCall_11_1_0());
		c.setLinewrap(2).after(g.getSpecificationAccess().getStateVariableParserRuleCall_11_1_0());
		
		c.setLinewrap().after(g.getSpecificationAccess().getMacrosKeyword_12_0());
		c.setIndentationIncrement().after(g.getSpecificationAccess().getMacrosKeyword_12_0());
		c.setLinewrap().after(g.getMacroRule());
		c.setIndentationDecrement().after(g.getSpecificationAccess().getMacrosMacroParserRuleCall_12_1_0());
		c.setLinewrap(2).after(g.getSpecificationAccess().getMacrosMacroParserRuleCall_12_1_0());

		//this is useful for the rest
		c.setLinewrap().after(g.getConstraintRule());
		
		c.setLinewrap().before(g.getSpecificationAccess().getAssumptionsAssignment_13_2());
		c.setIndentationIncrement().before(g.getSpecificationAccess().getAssumptionsAssignment_13_2());
		c.setIndentationDecrement().after(g.getSpecificationAccess().getAssumptionsAssignment_13_2());
		c.setLinewrap(2).after(g.getSpecificationAccess().getAssumptionsConstraintParserRuleCall_13_2_0());
		
		c.setLinewrap().before(g.getSpecificationAccess().getRequirementsAssignment_16());
		c.setIndentationIncrement().before(g.getSpecificationAccess().getRequirementsAssignment_16());
		c.setIndentationDecrement().after(g.getSpecificationAccess().getRequirementsAssignment_16());
		c.setLinewrap(2).after(g.getSpecificationAccess().getRequirementsConstraintParserRuleCall_16_0());
		
		c.setLinewrap().before(g.getSpecificationAccess().getBehaviorsAssignment_17_2());
		c.setIndentationIncrement().before(g.getSpecificationAccess().getBehaviorsAssignment_17_2());
		c.setIndentationDecrement().after(g.getSpecificationAccess().getBehaviorsAssignment_17_2());
		c.setLinewrap(2).after(g.getSpecificationAccess().getBehaviorsConstraintParserRuleCall_17_2_0());
		
		for(Keyword comma : g.findKeywords(",")) {
			c.setNoSpace().before(comma);
		}
		
		for(Keyword semi : g.findKeywords(":")) {
			c.setNoSpace().before(semi);
		}
		
		for(Keyword period : g.findKeywords(".")) {
			c.setNoSpace().around(period);
		}
		
		for(Keyword openParen : g.findKeywords("(")) {
			c.setNoSpace().after(openParen);
		}

		for(Keyword closeParen : g.findKeywords(")")) {
			c.setNoSpace().before(closeParen);
		}
	}
}
