/*
 * generated by Xtext
 */
grammar InternalSpear;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.rockwellcollins.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.rockwellcollins.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.rockwellcollins.services.SpearGrammarAccess;

}

@parser::members {

 	private SpearGrammarAccess grammarAccess;
 	
    public InternalSpearParser(TokenStream input, SpearGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "File";	
   	}
   	
   	@Override
   	protected SpearGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	 iv_ruleFile=ruleFile 
	 { $current=$iv_ruleFile.current; } 
	 EOF 
;

// Rule File
ruleFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFileAccess().getSpecificationParserRuleCall_0()); 
    }
    this_Specification_0=ruleSpecification
    { 
        $current = $this_Specification_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFileAccess().getDefinitionsParserRuleCall_1()); 
    }
    this_Definitions_1=ruleDefinitions
    { 
        $current = $this_Definitions_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSpecification
entryRuleSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecificationRule()); }
	 iv_ruleSpecification=ruleSpecification 
	 { $current=$iv_ruleSpecification.current; } 
	 EOF 
;

// Rule Specification
ruleSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Specification' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSpecificationAccess().getSpecificationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSpecificationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_2='Imports:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSpecificationAccess().getImportsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getImportsImportParserRuleCall_2_1_0()); 
	    }
		lv_imports_3_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_3_0, 
        		"com.rockwellcollins.Spear.Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_4='Units:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSpecificationAccess().getUnitsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getUnitsUnitDefParserRuleCall_3_1_0()); 
	    }
		lv_units_5_0=ruleUnitDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"units",
        		lv_units_5_0, 
        		"com.rockwellcollins.Spear.UnitDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_6='Types:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSpecificationAccess().getTypesKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getTypedefsTypeDefParserRuleCall_4_1_0()); 
	    }
		lv_typedefs_7_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"typedefs",
        		lv_typedefs_7_0, 
        		"com.rockwellcollins.Spear.TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_8='Constants:' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSpecificationAccess().getConstantsKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getConstantsConstantParserRuleCall_5_1_0()); 
	    }
		lv_constants_9_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_9_0, 
        		"com.rockwellcollins.Spear.Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_10='Patterns:' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSpecificationAccess().getPatternsKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getPatternsPatternParserRuleCall_6_1_0()); 
	    }
		lv_patterns_11_0=rulePattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"patterns",
        		lv_patterns_11_0, 
        		"com.rockwellcollins.Spear.Pattern");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_12='Inputs:' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSpecificationAccess().getInputsKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getInputsVariableParserRuleCall_8_0()); 
	    }
		lv_inputs_13_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_13_0, 
        		"com.rockwellcollins.Spear.Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_14='Outputs:' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSpecificationAccess().getOutputsKeyword_9());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getOutputsVariableParserRuleCall_10_0()); 
	    }
		lv_outputs_15_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"outputs",
        		lv_outputs_15_0, 
        		"com.rockwellcollins.Spear.Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_16='State:' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getSpecificationAccess().getStateKeyword_11_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getStateVariableParserRuleCall_11_1_0()); 
	    }
		lv_state_17_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"state",
        		lv_state_17_0, 
        		"com.rockwellcollins.Spear.Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_18='Macros:' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getSpecificationAccess().getMacrosKeyword_12_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getMacrosMacroParserRuleCall_12_1_0()); 
	    }
		lv_macros_19_0=ruleMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"macros",
        		lv_macros_19_0, 
        		"com.rockwellcollins.Spear.Macro");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_20='Assumptions:' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getSpecificationAccess().getAssumptionsKeyword_13_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getAssumptionsConstraintParserRuleCall_13_1_0()); 
	    }
		lv_assumptions_21_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"assumptions",
        		lv_assumptions_21_0, 
        		"com.rockwellcollins.Spear.Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_22='DerivedRequirements:' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getSpecificationAccess().getDerivedRequirementsKeyword_14());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getRequirementsConstraintParserRuleCall_15_0()); 
	    }
		lv_requirements_23_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"requirements",
        		lv_requirements_23_0, 
        		"com.rockwellcollins.Spear.Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_24='Requirements:' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getSpecificationAccess().getRequirementsKeyword_16_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecificationAccess().getBehaviorsConstraintParserRuleCall_16_1_0()); 
	    }
		lv_behaviors_25_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecificationRule());
	        }
       		add(
       			$current, 
       			"behaviors",
        		lv_behaviors_25_0, 
        		"com.rockwellcollins.Spear.Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
;





// Entry rule entryRuleDefinitions
entryRuleDefinitions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionsRule()); }
	 iv_ruleDefinitions=ruleDefinitions 
	 { $current=$iv_ruleDefinitions.current; } 
	 EOF 
;

// Rule Definitions
ruleDefinitions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Definitions' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefinitionsAccess().getDefinitionsKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefinitionsAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_2='Units:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefinitionsAccess().getUnitsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionsAccess().getUnitdefsUnitDefParserRuleCall_2_1_0()); 
	    }
		lv_unitdefs_3_0=ruleUnitDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionsRule());
	        }
       		add(
       			$current, 
       			"unitdefs",
        		lv_unitdefs_3_0, 
        		"com.rockwellcollins.Spear.UnitDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_4='Types:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefinitionsAccess().getTypesKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionsAccess().getTypedefsTypeDefParserRuleCall_3_1_0()); 
	    }
		lv_typedefs_5_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionsRule());
	        }
       		add(
       			$current, 
       			"typedefs",
        		lv_typedefs_5_0, 
        		"com.rockwellcollins.Spear.TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_6='Constants:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefinitionsAccess().getConstantsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionsAccess().getConstantsConstantParserRuleCall_4_1_0()); 
	    }
		lv_constants_7_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionsRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_7_0, 
        		"com.rockwellcollins.Spear.Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_8='Patterns:' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDefinitionsAccess().getPatternsKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionsAccess().getPatternsPatternParserRuleCall_5_1_0()); 
	    }
		lv_patterns_9_0=rulePattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionsRule());
	        }
       		add(
       			$current, 
       			"patterns",
        		lv_patterns_9_0, 
        		"com.rockwellcollins.Spear.Pattern");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	 iv_rulePattern=rulePattern 
	 { $current=$iv_rulePattern.current; } 
	 EOF 
;

// Rule Pattern
rulePattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pattern' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPatternAccess().getPatternKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPatternRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleUnitDef
entryRuleUnitDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitDefRule()); }
	 iv_ruleUnitDef=ruleUnitDef 
	 { $current=$iv_ruleUnitDef.current; } 
	 EOF 
;

// Rule UnitDef
ruleUnitDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnitDefAccess().getBaseUnitAction_0_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getUnitDefAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getUnitDefAccess().getDescriptionSTRINGTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnitDefAccess().getDerivedUnitAction_1_0(),
            $current);
    }
)(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getUnitDefAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getUnitDefAccess().getIdTypeDelimiterParserRuleCall_1_2()); 
    }
ruleIdTypeDelimiter
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitDefAccess().getUnitUnitExprParserRuleCall_1_3_0()); 
	    }
		lv_unit_6_0=ruleUnitExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitDefRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_6_0, 
        		"com.rockwellcollins.Spear.UnitExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_description_7_0=RULE_STRING
		{
			newLeafNode(lv_description_7_0, grammarAccess.getUnitDefAccess().getDescriptionSTRINGTerminalRuleCall_1_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_7_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)?))
;





// Entry rule entryRuleUnitExpr
entryRuleUnitExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitExprRule()); }
	 iv_ruleUnitExpr=ruleUnitExpr 
	 { $current=$iv_ruleUnitExpr.current; } 
	 EOF 
;

// Rule UnitExpr
ruleUnitExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getUnitExprAccess().getProductUnitExprParserRuleCall()); 
    }
    this_ProductUnitExpr_0=ruleProductUnitExpr
    { 
        $current = $this_ProductUnitExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleProductUnitExpr
entryRuleProductUnitExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductUnitExprRule()); }
	 iv_ruleProductUnitExpr=ruleProductUnitExpr 
	 { $current=$iv_ruleProductUnitExpr.current; } 
	 EOF 
;

// Rule ProductUnitExpr
ruleProductUnitExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProductUnitExprAccess().getDivisionUnitExprParserRuleCall_0()); 
    }
    this_DivisionUnitExpr_0=ruleDivisionUnitExpr
    { 
        $current = $this_DivisionUnitExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'*' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getProductUnitExprAccess().getBinaryUnitExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'*' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getProductUnitExprAccess().getOpAsteriskKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductUnitExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "*");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getProductUnitExprAccess().getRightProductUnitExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleProductUnitExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductUnitExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.Spear.ProductUnitExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDivisionUnitExpr
entryRuleDivisionUnitExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivisionUnitExprRule()); }
	 iv_ruleDivisionUnitExpr=ruleDivisionUnitExpr 
	 { $current=$iv_ruleDivisionUnitExpr.current; } 
	 EOF 
;

// Rule DivisionUnitExpr
ruleDivisionUnitExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDivisionUnitExprAccess().getAtomicUnitExprParserRuleCall_0()); 
    }
    this_AtomicUnitExpr_0=ruleAtomicUnitExpr
    { 
        $current = $this_AtomicUnitExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'/' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDivisionUnitExprAccess().getBinaryUnitExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'/' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getDivisionUnitExprAccess().getOpSolidusKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDivisionUnitExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "/");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getDivisionUnitExprAccess().getRightAtomicUnitExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAtomicUnitExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivisionUnitExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.Spear.AtomicUnitExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAtomicUnitExpr
entryRuleAtomicUnitExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicUnitExprRule()); }
	 iv_ruleAtomicUnitExpr=ruleAtomicUnitExpr 
	 { $current=$iv_ruleAtomicUnitExpr.current; } 
	 EOF 
;

// Rule AtomicUnitExpr
ruleAtomicUnitExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicUnitExprAccess().getNamedUnitExprAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicUnitExprRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAtomicUnitExprAccess().getUnitUnitDefCrossReference_0_1_0()); 
	}

)
))
    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomicUnitExprAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtomicUnitExprAccess().getUnitExprParserRuleCall_1_1()); 
    }
    this_UnitExpr_3=ruleUnitExpr
    { 
        $current = $this_UnitExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicUnitExprAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	 iv_ruleTypeDef=ruleTypeDef 
	 { $current=$iv_ruleTypeDef.current; } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeDefAccess().getNamedTypeDefAction_0_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeDefAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getIdTypeDelimiterParserRuleCall_0_2()); 
    }
ruleIdTypeDelimiter
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getTypeTypeParserRuleCall_0_3_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"com.rockwellcollins.Spear.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getTypeDefAccess().getUnitUnitDefCrossReference_0_4_0()); 
	}

)
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeDefAccess().getRecordTypeDefAction_1_0(),
            $current);
    }
)(
(
		lv_name_6_0=RULE_ID
		{
			newLeafNode(lv_name_6_0, grammarAccess.getTypeDefAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getIdTypeDelimiterParserRuleCall_1_2()); 
    }
ruleIdTypeDelimiter
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_8='record' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypeDefAccess().getRecordKeyword_1_3());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTypeDefAccess().getLeftCurlyBracketKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getFieldsFieldTypeParserRuleCall_1_5_0()); 
	    }
		lv_fields_10_0=ruleFieldType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_10_0, 
        		"com.rockwellcollins.Spear.FieldType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTypeDefAccess().getCommaKeyword_1_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getFieldsFieldTypeParserRuleCall_1_6_1_0()); 
	    }
		lv_fields_12_0=ruleFieldType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_12_0, 
        		"com.rockwellcollins.Spear.FieldType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTypeDefAccess().getRightCurlyBracketKeyword_1_7());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeDefAccess().getArrayTypeDefAction_2_0(),
            $current);
    }
)(
(
		lv_name_15_0=RULE_ID
		{
			newLeafNode(lv_name_15_0, grammarAccess.getTypeDefAccess().getNameIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_15_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getIdTypeDelimiterParserRuleCall_2_2()); 
    }
ruleIdTypeDelimiter
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getBaseTypeParserRuleCall_2_3_0()); 
	    }
		lv_base_17_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		set(
       			$current, 
       			"base",
        		lv_base_17_0, 
        		"com.rockwellcollins.Spear.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18='[' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getTypeDefAccess().getLeftSquareBracketKeyword_2_4());
    }
(
(
		lv_size_19_0=RULE_INT
		{
			newLeafNode(lv_size_19_0, grammarAccess.getTypeDefAccess().getSizeINTTerminalRuleCall_2_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_19_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)	otherlv_20=']' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTypeDefAccess().getRightSquareBracketKeyword_2_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeDefAccess().getEnumTypeDefAction_3_0(),
            $current);
    }
)(
(
		lv_name_22_0=RULE_ID
		{
			newLeafNode(lv_name_22_0, grammarAccess.getTypeDefAccess().getNameIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_22_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getIdTypeDelimiterParserRuleCall_3_2()); 
    }
ruleIdTypeDelimiter
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_24='enum' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getTypeDefAccess().getEnumKeyword_3_3());
    }
	otherlv_25='{' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getTypeDefAccess().getLeftCurlyBracketKeyword_3_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getValuesEnumValueParserRuleCall_3_5_0()); 
	    }
		lv_values_26_0=ruleEnumValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_26_0, 
        		"com.rockwellcollins.Spear.EnumValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_27=',' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getTypeDefAccess().getCommaKeyword_3_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getValuesEnumValueParserRuleCall_3_6_1_0()); 
	    }
		lv_values_28_0=ruleEnumValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_28_0, 
        		"com.rockwellcollins.Spear.EnumValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_29='}' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getTypeDefAccess().getRightCurlyBracketKeyword_3_7());
    }
))
;





// Entry rule entryRuleFieldType
entryRuleFieldType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldTypeRule()); }
	 iv_ruleFieldType=ruleFieldType 
	 { $current=$iv_ruleFieldType.current; } 
	 EOF 
;

// Rule FieldType
ruleFieldType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFieldTypeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldTypeAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldTypeAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.Spear.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEnumValue
entryRuleEnumValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumValueRule()); }
	 iv_ruleEnumValue=ruleEnumValue 
	 { $current=$iv_ruleEnumValue.current; } 
	 EOF 
;

// Rule EnumValue
ruleEnumValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEnumValueAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getIntTypeAction_0_0(),
            $current);
    }
)	otherlv_1='int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getIntKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getBoolTypeAction_1_0(),
            $current);
    }
)	otherlv_3='bool' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getBoolKeyword_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getRealTypeAction_2_0(),
            $current);
    }
)	otherlv_5='real' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getRealKeyword_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getUserTypeAction_3_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getTypeAccess().getDefTypeDefCrossReference_3_1_0()); 
	}

)
)))
;





// Entry rule entryRuleIdTypeDelimiter
entryRuleIdTypeDelimiter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdTypeDelimiterRule()); } 
	 iv_ruleIdTypeDelimiter=ruleIdTypeDelimiter 
	 { $current=$iv_ruleIdTypeDelimiter.current.getText(); }  
	 EOF 
;

// Rule IdTypeDelimiter
ruleIdTypeDelimiter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdTypeDelimiterAccess().getColonKeyword_0()); 
    }

    |
	kw='is a' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdTypeDelimiterAccess().getIsAKeyword_1()); 
    }

    |
	kw='is an' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdTypeDelimiterAccess().getIsAnKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getIdTypeDelimiterParserRuleCall_1()); 
    }
ruleIdTypeDelimiter
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.Spear.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getExprExprParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='text' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstantAccess().getTextKeyword_5_0());
    }
	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConstantAccess().getEqualsSignKeyword_5_1());
    }
(
(
		lv_descriptor_7_0=RULE_STRING
		{
			newLeafNode(lv_descriptor_7_0, grammarAccess.getConstantAccess().getDescriptorSTRINGTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"descriptor",
        		lv_descriptor_7_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getIdTypeDelimiterParserRuleCall_1()); 
    }
ruleIdTypeDelimiter
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.Spear.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMacro
entryRuleMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroRule()); }
	 iv_ruleMacro=ruleMacro 
	 { $current=$iv_ruleMacro.current; } 
	 EOF 
;

// Rule Macro
ruleMacro returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMacroAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMacroRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getMacroAccess().getIdTypeDelimiterParserRuleCall_1()); 
    }
ruleIdTypeDelimiter
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.rockwellcollins.Spear.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMacroAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroAccess().getExprExprParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='text' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMacroAccess().getTextKeyword_5_0());
    }
	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMacroAccess().getEqualsSignKeyword_5_1());
    }
(
(
		lv_descriptor_7_0=RULE_STRING
		{
			newLeafNode(lv_descriptor_7_0, grammarAccess.getMacroAccess().getDescriptorSTRINGTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMacroRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"descriptor",
        		lv_descriptor_7_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getFormalConstraintParserRuleCall_0()); 
    }
    this_FormalConstraint_0=ruleFormalConstraint
    { 
        $current = $this_FormalConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getEnglishConstraintParserRuleCall_1()); 
    }
    this_EnglishConstraint_1=ruleEnglishConstraint
    { 
        $current = $this_EnglishConstraint_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFormalConstraint
entryRuleFormalConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalConstraintRule()); }
	 iv_ruleFormalConstraint=ruleFormalConstraint 
	 { $current=$iv_ruleFormalConstraint.current; } 
	 EOF 
;

// Rule FormalConstraint
ruleFormalConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFormalConstraintAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormalConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFormalConstraintAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalConstraintAccess().getExprExprParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalConstraintRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='text' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFormalConstraintAccess().getTextKeyword_3_0());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFormalConstraintAccess().getEqualsSignKeyword_3_1());
    }
(
(
		lv_descriptor_5_0=RULE_STRING
		{
			newLeafNode(lv_descriptor_5_0, grammarAccess.getFormalConstraintAccess().getDescriptorSTRINGTerminalRuleCall_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormalConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"descriptor",
        		lv_descriptor_5_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?)
;





// Entry rule entryRuleEnglishConstraint
entryRuleEnglishConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnglishConstraintRule()); }
	 iv_ruleEnglishConstraint=ruleEnglishConstraint 
	 { $current=$iv_ruleEnglishConstraint.current; } 
	 EOF 
;

// Rule EnglishConstraint
ruleEnglishConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEnglishConstraintAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnglishConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnglishConstraintAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_text_2_0=RULE_STRING
		{
			newLeafNode(lv_text_2_0, grammarAccess.getEnglishConstraintAccess().getTextSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnglishConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_2_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExprAccess().getImpliesExprParserRuleCall()); 
    }
    this_ImpliesExpr_0=ruleImpliesExpr
    { 
        $current = $this_ImpliesExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleImpliesExpr
entryRuleImpliesExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpliesExprRule()); }
	 iv_ruleImpliesExpr=ruleImpliesExpr 
	 { $current=$iv_ruleImpliesExpr.current; } 
	 EOF 
;

// Rule ImpliesExpr
ruleImpliesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImpliesExprAccess().getOrExprParserRuleCall_0()); 
    }
    this_OrExpr_0=ruleOrExpr
    { 
        $current = $this_OrExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'=>' 
 

    |			'implies' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'=>' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getImpliesExprAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImpliesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'implies' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getImpliesExprAccess().getOpImpliesKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImpliesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExprAccess().getRightImpliesExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleImpliesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.Spear.ImpliesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); 
    }
    this_AndExpr_0=ruleAndExpr
    { 
        $current = $this_AndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'or' 
 

    |			'xor' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'or' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getOrExprAccess().getOpOrKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'xor' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getOrExprAccess().getOpXorKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightImpliesExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleImpliesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.Spear.ImpliesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExprAccess().getTriggersExprParserRuleCall_0()); 
    }
    this_TriggersExpr_0=ruleTriggersExpr
    { 
        $current = $this_TriggersExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'and' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'and' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndExprAccess().getOpAndKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "and");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightAndExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.Spear.AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTriggersExpr
entryRuleTriggersExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggersExprRule()); }
	 iv_ruleTriggersExpr=ruleTriggersExpr 
	 { $current=$iv_ruleTriggersExpr.current; } 
	 EOF 
;

// Rule TriggersExpr
ruleTriggersExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTriggersExprAccess().getSinceExprParserRuleCall_0()); 
    }
    this_SinceExpr_0=ruleSinceExpr
    { 
        $current = $this_SinceExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'T' 
 

    |			'triggers' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTriggersExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'T' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getTriggersExprAccess().getOpTKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggersExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'triggers' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getTriggersExprAccess().getOpTriggersKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggersExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggersExprAccess().getRightTriggersExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleTriggersExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggersExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.Spear.TriggersExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSinceExpr
entryRuleSinceExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSinceExprRule()); }
	 iv_ruleSinceExpr=ruleSinceExpr 
	 { $current=$iv_ruleSinceExpr.current; } 
	 EOF 
;

// Rule SinceExpr
ruleSinceExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSinceExprAccess().getTemporalPrefixExprParserRuleCall_0()); 
    }
    this_TemporalPrefixExpr_0=ruleTemporalPrefixExpr
    { 
        $current = $this_TemporalPrefixExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'S' 
 

    |			'since' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSinceExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'S' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getSinceExprAccess().getOpSKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSinceExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'since' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getSinceExprAccess().getOpSinceKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSinceExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getSinceExprAccess().getRightSinceExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleSinceExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSinceExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.Spear.SinceExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTemporalPrefixExpr
entryRuleTemporalPrefixExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemporalPrefixExprRule()); }
	 iv_ruleTemporalPrefixExpr=ruleTemporalPrefixExpr 
	 { $current=$iv_ruleTemporalPrefixExpr.current; } 
	 EOF 
;

// Rule TemporalPrefixExpr
ruleTemporalPrefixExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTemporalPrefixExprAccess().getUnaryExprAction_0_0(),
            $current);
    }
)(
(
(
		lv_op_1_1=	'O' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getTemporalPrefixExprAccess().getOpOKeyword_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'once' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getTemporalPrefixExprAccess().getOpOnceKeyword_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

    |		lv_op_1_3=	'H' 
    {
        newLeafNode(lv_op_1_3, grammarAccess.getTemporalPrefixExprAccess().getOpHKeyword_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_3, null);
	    }

    |		lv_op_1_4=	'historically' 
    {
        newLeafNode(lv_op_1_4, grammarAccess.getTemporalPrefixExprAccess().getOpHistoricallyKeyword_0_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_4, null);
	    }

    |		lv_op_1_5=	'never' 
    {
        newLeafNode(lv_op_1_5, grammarAccess.getTemporalPrefixExprAccess().getOpNeverKeyword_0_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_5, null);
	    }

    |		lv_op_1_6=	'before' 
    {
        newLeafNode(lv_op_1_6, grammarAccess.getTemporalPrefixExprAccess().getOpBeforeKeyword_0_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_6, null);
	    }

    |		lv_op_1_7=	'initially' 
    {
        newLeafNode(lv_op_1_7, grammarAccess.getTemporalPrefixExprAccess().getOpInitiallyKeyword_0_1_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemporalPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_7, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTemporalPrefixExprAccess().getExprTemporalPrefixExprParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=ruleTemporalPrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemporalPrefixExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"com.rockwellcollins.Spear.TemporalPrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getTemporalPrefixExprAccess().getRelationalExprParserRuleCall_1()); 
    }
    this_RelationalExpr_3=ruleRelationalExpr
    { 
        $current = $this_RelationalExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRelationalExpr
entryRuleRelationalExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExprRule()); }
	 iv_ruleRelationalExpr=ruleRelationalExpr 
	 { $current=$iv_ruleRelationalExpr.current; } 
	 EOF 
;

// Rule RelationalExpr
ruleRelationalExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExprAccess().getPlusExprParserRuleCall_0()); 
    }
    this_PlusExpr_0=rulePlusExpr
    { 
        $current = $this_PlusExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleRelationalOp
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExprAccess().getOpRelationalOpParserRuleCall_1_0_0_1_0()); 
	    }
		lv_op_2_0=ruleRelationalOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"com.rockwellcollins.Spear.RelationalOp");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExprAccess().getRightRelationalExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleRelationalExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.Spear.RelationalExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); } 
	 iv_ruleRelationalOp=ruleRelationalOp 
	 { $current=$iv_ruleRelationalOp.current.getText(); }  
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_0()); 
    }

    |(
	kw='less' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessKeyword_1_0()); 
    }

	kw='than' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getThanKeyword_1_1()); 
    }
)
    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_2()); 
    }

    |(
	kw='less' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessKeyword_3_0()); 
    }

	kw='than' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getThanKeyword_3_1()); 
    }

	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getOrKeyword_3_2()); 
    }

	kw='equal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualKeyword_3_3()); 
    }

	kw='to' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getToKeyword_3_4()); 
    }
)
    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_4()); 
    }

    |(
	kw='greater' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterKeyword_5_0()); 
    }

	kw='than' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getThanKeyword_5_1()); 
    }
)
    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_6()); 
    }

    |(
	kw='greater' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterKeyword_7_0()); 
    }

	kw='than' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getThanKeyword_7_1()); 
    }

	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getOrKeyword_7_2()); 
    }

	kw='equal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualKeyword_7_3()); 
    }

	kw='to' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getToKeyword_7_4()); 
    }
)
    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualsSignEqualsSignKeyword_8()); 
    }

    |(
	kw='equal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualKeyword_9_0()); 
    }

	kw='to' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getToKeyword_9_1()); 
    }
)
    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignGreaterThanSignKeyword_10()); 
    }

    |(
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getNotKeyword_11_0()); 
    }

	kw='equal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualKeyword_11_1()); 
    }

	kw='to' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getToKeyword_11_2()); 
    }
))
    ;





// Entry rule entryRulePlusExpr
entryRulePlusExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusExprRule()); }
	 iv_rulePlusExpr=rulePlusExpr 
	 { $current=$iv_rulePlusExpr.current; } 
	 EOF 
;

// Rule PlusExpr
rulePlusExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlusExprAccess().getMultiplyExprParserRuleCall_0()); 
    }
    this_MultiplyExpr_0=ruleMultiplyExpr
    { 
        $current = $this_MultiplyExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'+' 
 

    |			'-' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getPlusExprAccess().getOpPlusSignKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getPlusExprAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusExprAccess().getRightPlusExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=rulePlusExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.Spear.PlusExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMultiplyExpr
entryRuleMultiplyExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplyExprRule()); }
	 iv_ruleMultiplyExpr=ruleMultiplyExpr 
	 { $current=$iv_ruleMultiplyExpr.current; } 
	 EOF 
;

// Rule MultiplyExpr
ruleMultiplyExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplyExprAccess().getPrefixExprParserRuleCall_0()); 
    }
    this_PrefixExpr_0=rulePrefixExpr
    { 
        $current = $this_PrefixExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'*' 
 

    |			'/' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplyExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMultiplyExprAccess().getOpAsteriskKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplyExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMultiplyExprAccess().getOpSolidusKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplyExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplyExprAccess().getRightMultiplyExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleMultiplyExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplyExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.rockwellcollins.Spear.MultiplyExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePrefixExpr
entryRulePrefixExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixExprRule()); }
	 iv_rulePrefixExpr=rulePrefixExpr 
	 { $current=$iv_rulePrefixExpr.current; } 
	 EOF 
;

// Rule PrefixExpr
rulePrefixExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixExprAccess().getUnaryExprAction_0_0(),
            $current);
    }
)(
(
(
		lv_op_1_1=	'-' 
    {
        newLeafNode(lv_op_1_1, grammarAccess.getPrefixExprAccess().getOpHyphenMinusKeyword_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=	'not' 
    {
        newLeafNode(lv_op_1_2, grammarAccess.getPrefixExprAccess().getOpNotKeyword_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixExprAccess().getExprPrefixExprParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"com.rockwellcollins.Spear.PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixExprAccess().getPreviousExprAction_1_0(),
            $current);
    }
)	otherlv_4='previous' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrefixExprAccess().getPreviousKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixExprAccess().getVarPrefixExprParserRuleCall_1_2_0()); 
	    }
		lv_var_5_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixExprRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_5_0, 
        		"com.rockwellcollins.Spear.PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'with' 
)=>	otherlv_6='with' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPrefixExprAccess().getWithKeyword_1_3_0());
    }
)	otherlv_7='initial' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPrefixExprAccess().getInitialKeyword_1_3_1());
    }
	otherlv_8='value' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPrefixExprAccess().getValueKeyword_1_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixExprAccess().getInitPrefixExprParserRuleCall_1_3_3_0()); 
	    }
		lv_init_9_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixExprRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_9_0, 
        		"com.rockwellcollins.Spear.PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |
    { 
        newCompositeNode(grammarAccess.getPrefixExprAccess().getAccessExprParserRuleCall_2()); 
    }
    this_AccessExpr_10=ruleAccessExpr
    { 
        $current = $this_AccessExpr_10.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAccessExpr
entryRuleAccessExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessExprRule()); }
	 iv_ruleAccessExpr=ruleAccessExpr 
	 { $current=$iv_ruleAccessExpr.current; } 
	 EOF 
;

// Rule AccessExpr
ruleAccessExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAccessExprAccess().getAtomicExprParserRuleCall_0()); 
    }
    this_AtomicExpr_0=ruleAtomicExpr
    { 
        $current = $this_AtomicExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)	'.' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExprAccess().getRecordAccessExprRecordAction_1_0_0_0_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAccessExprAccess().getFullStopKeyword_1_0_0_0_1());
    }
))(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessExprRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getAccessExprAccess().getFieldFieldTypeCrossReference_1_0_1_0()); 
	}

)
))
    |(((((
)	'{' 
(
(
	RULE_ID

)
)	':=' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExprAccess().getRecordUpdateExprRecordAction_1_1_0_0_0(),
            $current);
    }
)	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAccessExprAccess().getLeftCurlyBracketKeyword_1_1_0_0_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessExprRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getAccessExprAccess().getFieldFieldTypeCrossReference_1_1_0_0_2_0()); 
	}

)
)	otherlv_7=':=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAccessExprAccess().getColonEqualsSignKeyword_1_1_0_0_3());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExprAccess().getValueExprParserRuleCall_1_1_1_0()); 
	    }
		lv_value_8_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_8_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAccessExprAccess().getRightCurlyBracketKeyword_1_1_2());
    }
)
    |(((((
)	'[' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExprAccess().getArrayAccessExprArrayAction_1_2_0_0_0(),
            $current);
    }
)	otherlv_11='[' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAccessExprAccess().getLeftSquareBracketKeyword_1_2_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExprAccess().getIndexExprParserRuleCall_1_2_1_0()); 
	    }
		lv_index_12_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExprRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_12_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(((((
)	':=' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExprAccess().getArrayUpdateExprAccessAction_1_2_2_0_0_0(),
            $current);
    }
)	otherlv_14=':=' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getAccessExprAccess().getColonEqualsSignKeyword_1_2_2_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExprAccess().getValueExprParserRuleCall_1_2_2_1_0()); 
	    }
		lv_value_15_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_15_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_16=']' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getAccessExprAccess().getRightSquareBracketKeyword_1_2_3());
    }
))*)
;





// Entry rule entryRuleAtomicExpr
entryRuleAtomicExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicExprRule()); }
	 iv_ruleAtomicExpr=ruleAtomicExpr 
	 { $current=$iv_ruleAtomicExpr.current; } 
	 EOF 
;

// Rule AtomicExpr
ruleAtomicExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAtomicExprAccess().getLiteralExprParserRuleCall_0()); 
    }
    this_LiteralExpr_0=ruleLiteralExpr
    { 
        $current = $this_LiteralExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getIdExprAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getAtomicExprAccess().getIdIdRefCrossReference_1_1_0()); 
	}

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getMIdExprAction_2_0(),
            $current);
    }
)	otherlv_4='|' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicExprAccess().getVerticalLineKeyword_2_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getAtomicExprAccess().getIdsIdRefCrossReference_2_2_0()); 
	}

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAtomicExprAccess().getCommaKeyword_2_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getAtomicExprAccess().getIdsIdRefCrossReference_2_3_1_0()); 
	}

)
))*	otherlv_8='|' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAtomicExprAccess().getVerticalLineKeyword_2_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getIfThenElseExprAction_3_0(),
            $current);
    }
)	otherlv_10='if' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAtomicExprAccess().getIfKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getCondExprParserRuleCall_3_2_0()); 
	    }
		lv_cond_11_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_11_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12='then' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getAtomicExprAccess().getThenKeyword_3_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getThenExprParserRuleCall_3_4_0()); 
	    }
		lv_then_13_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_13_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_14='else' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getAtomicExprAccess().getElseKeyword_3_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getElseExprParserRuleCall_3_5_1_0()); 
	    }
		lv_else_15_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_15_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getAfterUntilExprAction_4_0(),
            $current);
    }
)	otherlv_17='after' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getAtomicExprAccess().getAfterKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getAfterExprParserRuleCall_4_2_0()); 
	    }
		lv_after_18_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"after",
        		lv_after_18_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'until' 
)=>	otherlv_19='until' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getAtomicExprAccess().getUntilKeyword_4_3_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getUntilExprParserRuleCall_4_3_1_0()); 
	    }
		lv_until_20_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"until",
        		lv_until_20_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getWhileExprAction_5_0(),
            $current);
    }
)	otherlv_22='while' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getAtomicExprAccess().getWhileKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getCondExprParserRuleCall_5_2_0()); 
	    }
		lv_cond_23_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_23_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_24='then' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getAtomicExprAccess().getThenKeyword_5_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getThenExprParserRuleCall_5_4_0()); 
	    }
		lv_then_25_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_25_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getRecordExprAction_6_0(),
            $current);
    }
)	otherlv_27='new' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getAtomicExprAccess().getNewKeyword_6_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_28=RULE_ID
	{
		newLeafNode(otherlv_28, grammarAccess.getAtomicExprAccess().getTypeRecordTypeDefCrossReference_6_2_0()); 
	}

)
)	otherlv_29='{' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getAtomicExprAccess().getLeftCurlyBracketKeyword_6_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getFieldExprsFieldExprParserRuleCall_6_4_0()); 
	    }
		lv_fieldExprs_30_0=ruleFieldExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"fieldExprs",
        		lv_fieldExprs_30_0, 
        		"com.rockwellcollins.Spear.FieldExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_31=',' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getAtomicExprAccess().getCommaKeyword_6_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getFieldExprsFieldExprParserRuleCall_6_5_1_0()); 
	    }
		lv_fieldExprs_32_0=ruleFieldExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"fieldExprs",
        		lv_fieldExprs_32_0, 
        		"com.rockwellcollins.Spear.FieldExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_33='}' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getAtomicExprAccess().getRightCurlyBracketKeyword_6_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getArrayExprAction_7_0(),
            $current);
    }
)	otherlv_35='new' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getAtomicExprAccess().getNewKeyword_7_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_36=RULE_ID
	{
		newLeafNode(otherlv_36, grammarAccess.getAtomicExprAccess().getTypeArrayTypeDefCrossReference_7_2_0()); 
	}

)
)	otherlv_37='[' 
    {
    	newLeafNode(otherlv_37, grammarAccess.getAtomicExprAccess().getLeftSquareBracketKeyword_7_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprsExprParserRuleCall_7_4_0()); 
	    }
		lv_exprs_38_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_38_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_39=',' 
    {
    	newLeafNode(otherlv_39, grammarAccess.getAtomicExprAccess().getCommaKeyword_7_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprsExprParserRuleCall_7_5_1_0()); 
	    }
		lv_exprs_40_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_40_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_41=']' 
    {
    	newLeafNode(otherlv_41, grammarAccess.getAtomicExprAccess().getRightSquareBracketKeyword_7_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getPatternCallAction_8_0(),
            $current);
    }
)	otherlv_43='pattern' 
    {
    	newLeafNode(otherlv_43, grammarAccess.getAtomicExprAccess().getPatternKeyword_8_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_44=RULE_ID
	{
		newLeafNode(otherlv_44, grammarAccess.getAtomicExprAccess().getPatternPatternCrossReference_8_2_0()); 
	}

)
)	otherlv_45='(' 
    {
    	newLeafNode(otherlv_45, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_8_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_8_4_0()); 
	    }
		lv_args_46_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_46_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_47=',' 
    {
    	newLeafNode(otherlv_47, grammarAccess.getAtomicExprAccess().getCommaKeyword_8_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_8_5_1_0()); 
	    }
		lv_args_48_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_48_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_49=')' 
    {
    	newLeafNode(otherlv_49, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_8_6());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicExprAccess().getSpecificationCallAction_9_0(),
            $current);
    }
)	otherlv_51='spec' 
    {
    	newLeafNode(otherlv_51, grammarAccess.getAtomicExprAccess().getSpecKeyword_9_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicExprRule());
	        }
        }
	otherlv_52=RULE_ID
	{
		newLeafNode(otherlv_52, grammarAccess.getAtomicExprAccess().getSpecSpecificationCrossReference_9_2_0()); 
	}

)
)	otherlv_53='(' 
    {
    	newLeafNode(otherlv_53, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_9_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_9_4_0()); 
	    }
		lv_args_54_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_54_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_55=',' 
    {
    	newLeafNode(otherlv_55, grammarAccess.getAtomicExprAccess().getCommaKeyword_9_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicExprAccess().getArgsExprParserRuleCall_9_5_1_0()); 
	    }
		lv_args_56_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_56_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_57=')' 
    {
    	newLeafNode(otherlv_57, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_9_6());
    }
)
    |(	otherlv_58='(' 
    {
    	newLeafNode(otherlv_58, grammarAccess.getAtomicExprAccess().getLeftParenthesisKeyword_10_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtomicExprAccess().getExprParserRuleCall_10_1()); 
    }
    this_Expr_59=ruleExpr
    { 
        $current = $this_Expr_59.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_60=')' 
    {
    	newLeafNode(otherlv_60, grammarAccess.getAtomicExprAccess().getRightParenthesisKeyword_10_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getAtomicExprAccess().getUnusedExprParserRuleCall_11()); 
    }
    this_UnusedExpr_61=ruleUnusedExpr
    { 
        $current = $this_UnusedExpr_61.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralExpr
entryRuleLiteralExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExprRule()); }
	 iv_ruleLiteralExpr=ruleLiteralExpr 
	 { $current=$iv_ruleLiteralExpr.current; } 
	 EOF 
;

// Rule LiteralExpr
ruleLiteralExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralExprAccess().getIntLiteralAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getLiteralExprAccess().getValueINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralExprRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getLiteralExprAccess().getUnitUnitDefCrossReference_0_2_0()); 
	}

)
)?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralExprAccess().getBoolLiteralAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExprAccess().getValueBOOLParserRuleCall_1_1_0()); 
	    }
		lv_value_4_0=ruleBOOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"com.rockwellcollins.Spear.BOOL");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralExprAccess().getRealLiteralAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExprAccess().getValueREALParserRuleCall_2_1_0()); 
	    }
		lv_value_6_0=ruleREAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"com.rockwellcollins.Spear.REAL");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralExprRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getLiteralExprAccess().getUnitUnitDefCrossReference_2_2_0()); 
	}

)
)?))
;





// Entry rule entryRuleUnusedExpr
entryRuleUnusedExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnusedExprRule()); }
	 iv_ruleUnusedExpr=ruleUnusedExpr 
	 { $current=$iv_ruleUnusedExpr.current; } 
	 EOF 
;

// Rule UnusedExpr
ruleUnusedExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnusedExprAccess().getNormalizedCallAction_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnusedExprAccess().getNumberSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnusedExprRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getUnusedExprAccess().getIdsIdRefCrossReference_2_0()); 
	}

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnusedExprAccess().getCommaKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnusedExprRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getUnusedExprAccess().getIdsIdRefCrossReference_3_1_0()); 
	}

)
))*	otherlv_5='#' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnusedExprAccess().getNumberSignKeyword_4());
    }
	otherlv_6='==' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnusedExprAccess().getEqualsSignEqualsSignKeyword_5());
    }
	otherlv_7='spec' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getUnusedExprAccess().getSpecKeyword_6());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnusedExprRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getUnusedExprAccess().getSpecSpecificationCrossReference_7_0()); 
	}

)
)	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getUnusedExprAccess().getLeftParenthesisKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnusedExprAccess().getArgsExprParserRuleCall_9_0()); 
	    }
		lv_args_10_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnusedExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_10_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getUnusedExprAccess().getCommaKeyword_10_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnusedExprAccess().getArgsExprParserRuleCall_10_1_0()); 
	    }
		lv_args_12_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnusedExprRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_12_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getUnusedExprAccess().getRightParenthesisKeyword_11());
    }
)
;







// Entry rule entryRuleFieldExpr
entryRuleFieldExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldExprRule()); }
	 iv_ruleFieldExpr=ruleFieldExpr 
	 { $current=$iv_ruleFieldExpr.current; } 
	 EOF 
;

// Rule FieldExpr
ruleFieldExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldExprRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFieldExprAccess().getFieldFieldTypeCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldExprAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldExprAccess().getExprExprParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"com.rockwellcollins.Spear.Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBOOL
entryRuleBOOL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLRule()); } 
	 iv_ruleBOOL=ruleBOOL 
	 { $current=$iv_ruleBOOL.current.getText(); }  
	 EOF 
;

// Rule BOOL
ruleBOOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBOOLAccess().getBOOLEAN_TRUEParserRuleCall_0()); 
    }
    this_BOOLEAN_TRUE_0=ruleBOOLEAN_TRUE    {
		$current.merge(this_BOOLEAN_TRUE_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBOOLAccess().getBOOLEAN_FALSEParserRuleCall_1()); 
    }
    this_BOOLEAN_FALSE_1=ruleBOOLEAN_FALSE    {
		$current.merge(this_BOOLEAN_FALSE_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleBOOLEAN_TRUE
entryRuleBOOLEAN_TRUE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLEAN_TRUERule()); } 
	 iv_ruleBOOLEAN_TRUE=ruleBOOLEAN_TRUE 
	 { $current=$iv_ruleBOOLEAN_TRUE.current.getText(); }  
	 EOF 
;

// Rule BOOLEAN_TRUE
ruleBOOLEAN_TRUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='TRUE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEAN_TRUEAccess().getTRUEKeyword_0()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEAN_TRUEAccess().getTrueKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBOOLEAN_FALSE
entryRuleBOOLEAN_FALSE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLEAN_FALSERule()); } 
	 iv_ruleBOOLEAN_FALSE=ruleBOOLEAN_FALSE 
	 { $current=$iv_ruleBOOLEAN_FALSE.current.getText(); }  
	 EOF 
;

// Rule BOOLEAN_FALSE
ruleBOOLEAN_FALSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='FALSE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEAN_FALSEAccess().getFALSEKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEAN_FALSEAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getREALRule()); } 
	 iv_ruleREAL=ruleREAL 
	 { $current=$iv_ruleREAL.current.getText(); }  
	 EOF 
;

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getREALAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


