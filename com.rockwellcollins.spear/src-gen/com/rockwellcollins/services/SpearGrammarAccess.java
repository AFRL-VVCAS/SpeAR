/*
 * generated by Xtext
 */
package com.rockwellcollins.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SpearGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.File");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPatternsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//File:
		//	Specification | Definitions | Patterns;
		@Override public ParserRule getRule() { return rule; }

		//Specification | Definitions | Patterns
		public Alternatives getAlternatives() { return cAlternatives; }

		//Specification
		public RuleCall getSpecificationParserRuleCall_0() { return cSpecificationParserRuleCall_0; }

		//Definitions
		public RuleCall getDefinitionsParserRuleCall_1() { return cDefinitionsParserRuleCall_1; }

		//Patterns
		public RuleCall getPatternsParserRuleCall_2() { return cPatternsParserRuleCall_2; }
	}

	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cImportsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cImportsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_2_1_0 = (RuleCall)cImportsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUnitsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUnitsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUnitsUnitDefParserRuleCall_3_1_0 = (RuleCall)cUnitsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypedefsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypedefsTypeDefParserRuleCall_4_1_0 = (RuleCall)cTypedefsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConstantsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConstantsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConstantsConstantParserRuleCall_5_1_0 = (RuleCall)cConstantsAssignment_5_1.eContents().get(0);
		private final Keyword cInputsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInputsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInputsVariableParserRuleCall_7_0 = (RuleCall)cInputsAssignment_7.eContents().get(0);
		private final Keyword cOutputsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOutputsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOutputsVariableParserRuleCall_9_0 = (RuleCall)cOutputsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cStateKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cStateAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cStateVariableParserRuleCall_10_1_0 = (RuleCall)cStateAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cMacrosKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cMacrosAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cMacrosMacroParserRuleCall_11_1_0 = (RuleCall)cMacrosAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cAssumptionsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cAssumptionsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cAssumptionsConstraintParserRuleCall_12_1_0 = (RuleCall)cAssumptionsAssignment_12_1.eContents().get(0);
		private final Keyword cDerivedRequirementsKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cRequirementsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cRequirementsConstraintParserRuleCall_14_0 = (RuleCall)cRequirementsAssignment_14.eContents().get(0);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cRequirementsKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Assignment cBehaviorsAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final RuleCall cBehaviorsConstraintParserRuleCall_15_1_0 = (RuleCall)cBehaviorsAssignment_15_1.eContents().get(0);
		
		//Specification:
		//	'Specification' name=ID ('Imports:' imports+=Import*)? ('Units:' units+=UnitDef*)? ('Types:' typedefs+=TypeDef*)?
		//	('Constants:' constants+=Constant*)?
		//	'Inputs:' inputs+=Variable*
		//	'Outputs:' outputs+=Variable* ('State:' state+=Variable*)? ('Macros:' macros+=Macro*)? ('Assumptions:'
		//	assumptions+=Constraint*)?
		//	'DerivedRequirements:' requirements+=Constraint* ('Requirements:' behaviors+=Constraint*)?;
		@Override public ParserRule getRule() { return rule; }

		//'Specification' name=ID ('Imports:' imports+=Import*)? ('Units:' units+=UnitDef*)? ('Types:' typedefs+=TypeDef*)?
		//('Constants:' constants+=Constant*)? 'Inputs:' inputs+=Variable* 'Outputs:' outputs+=Variable* ('State:'
		//state+=Variable*)? ('Macros:' macros+=Macro*)? ('Assumptions:' assumptions+=Constraint*)? 'DerivedRequirements:'
		//requirements+=Constraint* ('Requirements:' behaviors+=Constraint*)?
		public Group getGroup() { return cGroup; }

		//'Specification'
		public Keyword getSpecificationKeyword_0() { return cSpecificationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('Imports:' imports+=Import*)?
		public Group getGroup_2() { return cGroup_2; }

		//'Imports:'
		public Keyword getImportsKeyword_2_0() { return cImportsKeyword_2_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2_1() { return cImportsAssignment_2_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_1_0() { return cImportsImportParserRuleCall_2_1_0; }

		//('Units:' units+=UnitDef*)?
		public Group getGroup_3() { return cGroup_3; }

		//'Units:'
		public Keyword getUnitsKeyword_3_0() { return cUnitsKeyword_3_0; }

		//units+=UnitDef*
		public Assignment getUnitsAssignment_3_1() { return cUnitsAssignment_3_1; }

		//UnitDef
		public RuleCall getUnitsUnitDefParserRuleCall_3_1_0() { return cUnitsUnitDefParserRuleCall_3_1_0; }

		//('Types:' typedefs+=TypeDef*)?
		public Group getGroup_4() { return cGroup_4; }

		//'Types:'
		public Keyword getTypesKeyword_4_0() { return cTypesKeyword_4_0; }

		//typedefs+=TypeDef*
		public Assignment getTypedefsAssignment_4_1() { return cTypedefsAssignment_4_1; }

		//TypeDef
		public RuleCall getTypedefsTypeDefParserRuleCall_4_1_0() { return cTypedefsTypeDefParserRuleCall_4_1_0; }

		//('Constants:' constants+=Constant*)?
		public Group getGroup_5() { return cGroup_5; }

		//'Constants:'
		public Keyword getConstantsKeyword_5_0() { return cConstantsKeyword_5_0; }

		//constants+=Constant*
		public Assignment getConstantsAssignment_5_1() { return cConstantsAssignment_5_1; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_5_1_0() { return cConstantsConstantParserRuleCall_5_1_0; }

		//'Inputs:'
		public Keyword getInputsKeyword_6() { return cInputsKeyword_6; }

		//inputs+=Variable*
		public Assignment getInputsAssignment_7() { return cInputsAssignment_7; }

		//Variable
		public RuleCall getInputsVariableParserRuleCall_7_0() { return cInputsVariableParserRuleCall_7_0; }

		//'Outputs:'
		public Keyword getOutputsKeyword_8() { return cOutputsKeyword_8; }

		//outputs+=Variable*
		public Assignment getOutputsAssignment_9() { return cOutputsAssignment_9; }

		//Variable
		public RuleCall getOutputsVariableParserRuleCall_9_0() { return cOutputsVariableParserRuleCall_9_0; }

		//('State:' state+=Variable*)?
		public Group getGroup_10() { return cGroup_10; }

		//'State:'
		public Keyword getStateKeyword_10_0() { return cStateKeyword_10_0; }

		//state+=Variable*
		public Assignment getStateAssignment_10_1() { return cStateAssignment_10_1; }

		//Variable
		public RuleCall getStateVariableParserRuleCall_10_1_0() { return cStateVariableParserRuleCall_10_1_0; }

		//('Macros:' macros+=Macro*)?
		public Group getGroup_11() { return cGroup_11; }

		//'Macros:'
		public Keyword getMacrosKeyword_11_0() { return cMacrosKeyword_11_0; }

		//macros+=Macro*
		public Assignment getMacrosAssignment_11_1() { return cMacrosAssignment_11_1; }

		//Macro
		public RuleCall getMacrosMacroParserRuleCall_11_1_0() { return cMacrosMacroParserRuleCall_11_1_0; }

		//('Assumptions:' assumptions+=Constraint*)?
		public Group getGroup_12() { return cGroup_12; }

		//'Assumptions:'
		public Keyword getAssumptionsKeyword_12_0() { return cAssumptionsKeyword_12_0; }

		//assumptions+=Constraint*
		public Assignment getAssumptionsAssignment_12_1() { return cAssumptionsAssignment_12_1; }

		//Constraint
		public RuleCall getAssumptionsConstraintParserRuleCall_12_1_0() { return cAssumptionsConstraintParserRuleCall_12_1_0; }

		//'DerivedRequirements:'
		public Keyword getDerivedRequirementsKeyword_13() { return cDerivedRequirementsKeyword_13; }

		//requirements+=Constraint*
		public Assignment getRequirementsAssignment_14() { return cRequirementsAssignment_14; }

		//Constraint
		public RuleCall getRequirementsConstraintParserRuleCall_14_0() { return cRequirementsConstraintParserRuleCall_14_0; }

		//('Requirements:' behaviors+=Constraint*)?
		public Group getGroup_15() { return cGroup_15; }

		//'Requirements:'
		public Keyword getRequirementsKeyword_15_0() { return cRequirementsKeyword_15_0; }

		//behaviors+=Constraint*
		public Assignment getBehaviorsAssignment_15_1() { return cBehaviorsAssignment_15_1; }

		//Constraint
		public RuleCall getBehaviorsConstraintParserRuleCall_15_1_0() { return cBehaviorsConstraintParserRuleCall_15_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }

		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class DefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.Definitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefinitionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUnitsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnitdefsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitdefsUnitDefParserRuleCall_2_1_0 = (RuleCall)cUnitdefsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypedefsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypedefsTypeDefParserRuleCall_3_1_0 = (RuleCall)cTypedefsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstantsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConstantsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConstantsConstantParserRuleCall_4_1_0 = (RuleCall)cConstantsAssignment_4_1.eContents().get(0);
		
		//Definitions:
		//	'Definitions' name=ID ('Units:' unitdefs+=UnitDef*)? ('Types:' typedefs+=TypeDef*)? ('Constants:'
		//	constants+=Constant*)?;
		@Override public ParserRule getRule() { return rule; }

		//'Definitions' name=ID ('Units:' unitdefs+=UnitDef*)? ('Types:' typedefs+=TypeDef*)? ('Constants:' constants+=Constant*)?
		public Group getGroup() { return cGroup; }

		//'Definitions'
		public Keyword getDefinitionsKeyword_0() { return cDefinitionsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('Units:' unitdefs+=UnitDef*)?
		public Group getGroup_2() { return cGroup_2; }

		//'Units:'
		public Keyword getUnitsKeyword_2_0() { return cUnitsKeyword_2_0; }

		//unitdefs+=UnitDef*
		public Assignment getUnitdefsAssignment_2_1() { return cUnitdefsAssignment_2_1; }

		//UnitDef
		public RuleCall getUnitdefsUnitDefParserRuleCall_2_1_0() { return cUnitdefsUnitDefParserRuleCall_2_1_0; }

		//('Types:' typedefs+=TypeDef*)?
		public Group getGroup_3() { return cGroup_3; }

		//'Types:'
		public Keyword getTypesKeyword_3_0() { return cTypesKeyword_3_0; }

		//typedefs+=TypeDef*
		public Assignment getTypedefsAssignment_3_1() { return cTypedefsAssignment_3_1; }

		//TypeDef
		public RuleCall getTypedefsTypeDefParserRuleCall_3_1_0() { return cTypedefsTypeDefParserRuleCall_3_1_0; }

		//('Constants:' constants+=Constant*)?
		public Group getGroup_4() { return cGroup_4; }

		//'Constants:'
		public Keyword getConstantsKeyword_4_0() { return cConstantsKeyword_4_0; }

		//constants+=Constant*
		public Assignment getConstantsAssignment_4_1() { return cConstantsAssignment_4_1; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_4_1_0() { return cConstantsConstantParserRuleCall_4_1_0; }
	}

	public class PatternsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.Patterns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPatternsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternsPatternParserRuleCall_2_0 = (RuleCall)cPatternsAssignment_2.eContents().get(0);
		
		//Patterns:
		//	'Patterns' name=ID patterns+=Pattern*;
		@Override public ParserRule getRule() { return rule; }

		//'Patterns' name=ID patterns+=Pattern*
		public Group getGroup() { return cGroup; }

		//'Patterns'
		public Keyword getPatternsKeyword_0() { return cPatternsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//patterns+=Pattern*
		public Assignment getPatternsAssignment_2() { return cPatternsAssignment_2; }

		//Pattern
		public RuleCall getPatternsPatternParserRuleCall_2_0() { return cPatternsPatternParserRuleCall_2_0; }
	}

	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Pattern:
		//	'Pattern' name=ID;
		@Override public ParserRule getRule() { return rule; }

		//'Pattern' name=ID
		public Group getGroup() { return cGroup; }

		//'Pattern'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class UnitDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.UnitDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBaseUnitAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cDescriptionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDerivedUnitAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final RuleCall cIdTypeDelimiterParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cUnitAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cUnitUnitExprParserRuleCall_1_3_0 = (RuleCall)cUnitAssignment_1_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_4_0 = (RuleCall)cDescriptionAssignment_1_4.eContents().get(0);
		
		//UnitDef:
		//	{BaseUnit} name=ID description=STRING?
		//	| {DerivedUnit} name=ID IdTypeDelimiter unit=UnitExpr description=STRING?;
		@Override public ParserRule getRule() { return rule; }

		//{BaseUnit} name=ID description=STRING? | {DerivedUnit} name=ID IdTypeDelimiter unit=UnitExpr description=STRING?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BaseUnit} name=ID description=STRING?
		public Group getGroup_0() { return cGroup_0; }

		//{BaseUnit}
		public Action getBaseUnitAction_0_0() { return cBaseUnitAction_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_0_2() { return cDescriptionAssignment_0_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_2_0() { return cDescriptionSTRINGTerminalRuleCall_0_2_0; }

		//{DerivedUnit} name=ID IdTypeDelimiter unit=UnitExpr description=STRING?
		public Group getGroup_1() { return cGroup_1; }

		//{DerivedUnit}
		public Action getDerivedUnitAction_1_0() { return cDerivedUnitAction_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//IdTypeDelimiter
		public RuleCall getIdTypeDelimiterParserRuleCall_1_2() { return cIdTypeDelimiterParserRuleCall_1_2; }

		//unit=UnitExpr
		public Assignment getUnitAssignment_1_3() { return cUnitAssignment_1_3; }

		//UnitExpr
		public RuleCall getUnitUnitExprParserRuleCall_1_3_0() { return cUnitUnitExprParserRuleCall_1_3_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_1_4() { return cDescriptionAssignment_1_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_4_0() { return cDescriptionSTRINGTerminalRuleCall_1_4_0; }
	}

	public class UnitExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.UnitExpr");
		private final RuleCall cProductUnitExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnitExpr:
		//	ProductUnitExpr;
		@Override public ParserRule getRule() { return rule; }

		//ProductUnitExpr
		public RuleCall getProductUnitExprParserRuleCall() { return cProductUnitExprParserRuleCall; }
	}

	public class ProductUnitExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.ProductUnitExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivisionUnitExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryUnitExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightProductUnitExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ProductUnitExpr UnitExpr:
		//	DivisionUnitExpr (=> ({BinaryUnitExpr.left=current} op='*') right=ProductUnitExpr)?
		@Override public ParserRule getRule() { return rule; }

		//DivisionUnitExpr (=> ({BinaryUnitExpr.left=current} op='*') right=ProductUnitExpr)?
		public Group getGroup() { return cGroup; }

		//DivisionUnitExpr
		public RuleCall getDivisionUnitExprParserRuleCall_0() { return cDivisionUnitExprParserRuleCall_0; }

		//(=> ({BinaryUnitExpr.left=current} op='*') right=ProductUnitExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryUnitExpr.left=current} op='*')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryUnitExpr.left=current} op='*')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryUnitExpr.left=current}
		public Action getBinaryUnitExprLeftAction_1_0_0_0() { return cBinaryUnitExprLeftAction_1_0_0_0; }

		//op='*'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0_1_0() { return cOpAsteriskKeyword_1_0_0_1_0; }

		//right=ProductUnitExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ProductUnitExpr
		public RuleCall getRightProductUnitExprParserRuleCall_1_1_0() { return cRightProductUnitExprParserRuleCall_1_1_0; }
	}

	public class DivisionUnitExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.DivisionUnitExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicUnitExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryUnitExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpSolidusKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAtomicUnitExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//DivisionUnitExpr UnitExpr:
		//	AtomicUnitExpr (=> ({BinaryUnitExpr.left=current} op='/') right=AtomicUnitExpr)?
		@Override public ParserRule getRule() { return rule; }

		//AtomicUnitExpr (=> ({BinaryUnitExpr.left=current} op='/') right=AtomicUnitExpr)?
		public Group getGroup() { return cGroup; }

		//AtomicUnitExpr
		public RuleCall getAtomicUnitExprParserRuleCall_0() { return cAtomicUnitExprParserRuleCall_0; }

		//(=> ({BinaryUnitExpr.left=current} op='/') right=AtomicUnitExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryUnitExpr.left=current} op='/')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryUnitExpr.left=current} op='/')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryUnitExpr.left=current}
		public Action getBinaryUnitExprLeftAction_1_0_0_0() { return cBinaryUnitExprLeftAction_1_0_0_0; }

		//op='/'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'/'
		public Keyword getOpSolidusKeyword_1_0_0_1_0() { return cOpSolidusKeyword_1_0_0_1_0; }

		//right=AtomicUnitExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AtomicUnitExpr
		public RuleCall getRightAtomicUnitExprParserRuleCall_1_1_0() { return cRightAtomicUnitExprParserRuleCall_1_1_0; }
	}

	public class AtomicUnitExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.AtomicUnitExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNamedUnitExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cUnitAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cUnitUnitDefCrossReference_0_1_0 = (CrossReference)cUnitAssignment_0_1.eContents().get(0);
		private final RuleCall cUnitUnitDefIDTerminalRuleCall_0_1_0_1 = (RuleCall)cUnitUnitDefCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUnitExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//AtomicUnitExpr UnitExpr:
		//	{NamedUnitExpr} unit=[UnitDef] | '(' UnitExpr ')'
		@Override public ParserRule getRule() { return rule; }

		//{NamedUnitExpr} unit=[UnitDef] | '(' UnitExpr ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NamedUnitExpr} unit=[UnitDef]
		public Group getGroup_0() { return cGroup_0; }

		//{NamedUnitExpr}
		public Action getNamedUnitExprAction_0_0() { return cNamedUnitExprAction_0_0; }

		//unit=[UnitDef]
		public Assignment getUnitAssignment_0_1() { return cUnitAssignment_0_1; }

		//[UnitDef]
		public CrossReference getUnitUnitDefCrossReference_0_1_0() { return cUnitUnitDefCrossReference_0_1_0; }

		//ID
		public RuleCall getUnitUnitDefIDTerminalRuleCall_0_1_0_1() { return cUnitUnitDefIDTerminalRuleCall_0_1_0_1; }

		//'(' UnitExpr ')'
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//UnitExpr
		public RuleCall getUnitExprParserRuleCall_1_1() { return cUnitExprParserRuleCall_1_1; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.TypeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNamedTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cIdTypeDelimiterParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_0_3_0 = (RuleCall)cTypeAssignment_0_3.eContents().get(0);
		private final Assignment cUnitAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cUnitUnitDefCrossReference_0_4_0 = (CrossReference)cUnitAssignment_0_4.eContents().get(0);
		private final RuleCall cUnitUnitDefIDTerminalRuleCall_0_4_0_1 = (RuleCall)cUnitUnitDefCrossReference_0_4_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRecordTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final RuleCall cIdTypeDelimiterParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRecordKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cFieldsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cFieldsRecordTypeFieldParserRuleCall_1_5_0 = (RuleCall)cFieldsAssignment_1_5.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cCommaKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cFieldsAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cFieldsRecordTypeFieldParserRuleCall_1_6_1_0 = (RuleCall)cFieldsAssignment_1_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cArrayTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final RuleCall cIdTypeDelimiterParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cBaseAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cBaseTypeParserRuleCall_2_3_0 = (RuleCall)cBaseAssignment_2_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cSizeAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cSizeINTTerminalRuleCall_2_5_0 = (RuleCall)cSizeAssignment_2_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cEnumTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final RuleCall cIdTypeDelimiterParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cEnumKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cValuesAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cValuesEnumValueParserRuleCall_3_5_0 = (RuleCall)cValuesAssignment_3_5.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cGroup_3.eContents().get(6);
		private final Keyword cCommaKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Assignment cValuesAssignment_3_6_1 = (Assignment)cGroup_3_6.eContents().get(1);
		private final RuleCall cValuesEnumValueParserRuleCall_3_6_1_0 = (RuleCall)cValuesAssignment_3_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_7 = (Keyword)cGroup_3.eContents().get(7);
		
		//TypeDef:
		//	{NamedType} name=ID IdTypeDelimiter type=Type unit=[UnitDef]?
		//	| {RecordType} name=ID IdTypeDelimiter 'record' '{' fields+=RecordTypeField (',' fields+=RecordTypeField)* '}'
		//	| {ArrayType} name=ID IdTypeDelimiter base=Type '[' size=INT ']'
		//	| {EnumType} name=ID IdTypeDelimiter 'enum' '{' values+=EnumValue (',' values+=EnumValue)* '}';
		@Override public ParserRule getRule() { return rule; }

		//{NamedType} name=ID IdTypeDelimiter type=Type unit=[UnitDef]? | {RecordType} name=ID IdTypeDelimiter 'record' '{'
		//fields+=RecordTypeField (',' fields+=RecordTypeField)* '}' | {ArrayType} name=ID IdTypeDelimiter base=Type '['
		//size=INT ']' | {EnumType} name=ID IdTypeDelimiter 'enum' '{' values+=EnumValue (',' values+=EnumValue)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{NamedType} name=ID IdTypeDelimiter type=Type unit=[UnitDef]?
		public Group getGroup_0() { return cGroup_0; }

		//{NamedType}
		public Action getNamedTypeAction_0_0() { return cNamedTypeAction_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//IdTypeDelimiter
		public RuleCall getIdTypeDelimiterParserRuleCall_0_2() { return cIdTypeDelimiterParserRuleCall_0_2; }

		//type=Type
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_3_0() { return cTypeTypeParserRuleCall_0_3_0; }

		//unit=[UnitDef]?
		public Assignment getUnitAssignment_0_4() { return cUnitAssignment_0_4; }

		//[UnitDef]
		public CrossReference getUnitUnitDefCrossReference_0_4_0() { return cUnitUnitDefCrossReference_0_4_0; }

		//ID
		public RuleCall getUnitUnitDefIDTerminalRuleCall_0_4_0_1() { return cUnitUnitDefIDTerminalRuleCall_0_4_0_1; }

		//{RecordType} name=ID IdTypeDelimiter 'record' '{' fields+=RecordTypeField (',' fields+=RecordTypeField)* '}'
		public Group getGroup_1() { return cGroup_1; }

		//{RecordType}
		public Action getRecordTypeAction_1_0() { return cRecordTypeAction_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//IdTypeDelimiter
		public RuleCall getIdTypeDelimiterParserRuleCall_1_2() { return cIdTypeDelimiterParserRuleCall_1_2; }

		//'record'
		public Keyword getRecordKeyword_1_3() { return cRecordKeyword_1_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }

		//fields+=RecordTypeField
		public Assignment getFieldsAssignment_1_5() { return cFieldsAssignment_1_5; }

		//RecordTypeField
		public RuleCall getFieldsRecordTypeFieldParserRuleCall_1_5_0() { return cFieldsRecordTypeFieldParserRuleCall_1_5_0; }

		//(',' fields+=RecordTypeField)*
		public Group getGroup_1_6() { return cGroup_1_6; }

		//','
		public Keyword getCommaKeyword_1_6_0() { return cCommaKeyword_1_6_0; }

		//fields+=RecordTypeField
		public Assignment getFieldsAssignment_1_6_1() { return cFieldsAssignment_1_6_1; }

		//RecordTypeField
		public RuleCall getFieldsRecordTypeFieldParserRuleCall_1_6_1_0() { return cFieldsRecordTypeFieldParserRuleCall_1_6_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_7() { return cRightCurlyBracketKeyword_1_7; }

		//{ArrayType} name=ID IdTypeDelimiter base=Type '[' size=INT ']'
		public Group getGroup_2() { return cGroup_2; }

		//{ArrayType}
		public Action getArrayTypeAction_2_0() { return cArrayTypeAction_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//IdTypeDelimiter
		public RuleCall getIdTypeDelimiterParserRuleCall_2_2() { return cIdTypeDelimiterParserRuleCall_2_2; }

		//base=Type
		public Assignment getBaseAssignment_2_3() { return cBaseAssignment_2_3; }

		//Type
		public RuleCall getBaseTypeParserRuleCall_2_3_0() { return cBaseTypeParserRuleCall_2_3_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_4() { return cLeftSquareBracketKeyword_2_4; }

		//size=INT
		public Assignment getSizeAssignment_2_5() { return cSizeAssignment_2_5; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_5_0() { return cSizeINTTerminalRuleCall_2_5_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_6() { return cRightSquareBracketKeyword_2_6; }

		//{EnumType} name=ID IdTypeDelimiter 'enum' '{' values+=EnumValue (',' values+=EnumValue)* '}'
		public Group getGroup_3() { return cGroup_3; }

		//{EnumType}
		public Action getEnumTypeAction_3_0() { return cEnumTypeAction_3_0; }

		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }

		//IdTypeDelimiter
		public RuleCall getIdTypeDelimiterParserRuleCall_3_2() { return cIdTypeDelimiterParserRuleCall_3_2; }

		//'enum'
		public Keyword getEnumKeyword_3_3() { return cEnumKeyword_3_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_4() { return cLeftCurlyBracketKeyword_3_4; }

		//values+=EnumValue
		public Assignment getValuesAssignment_3_5() { return cValuesAssignment_3_5; }

		//EnumValue
		public RuleCall getValuesEnumValueParserRuleCall_3_5_0() { return cValuesEnumValueParserRuleCall_3_5_0; }

		//(',' values+=EnumValue)*
		public Group getGroup_3_6() { return cGroup_3_6; }

		//','
		public Keyword getCommaKeyword_3_6_0() { return cCommaKeyword_3_6_0; }

		//values+=EnumValue
		public Assignment getValuesAssignment_3_6_1() { return cValuesAssignment_3_6_1; }

		//EnumValue
		public RuleCall getValuesEnumValueParserRuleCall_3_6_1_0() { return cValuesEnumValueParserRuleCall_3_6_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3_7() { return cRightCurlyBracketKeyword_3_7; }
	}

	public class RecordTypeFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.RecordTypeField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//RecordTypeField:
		//	name=ID ':' type=Type;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.EnumValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumValue:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIntKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBoolKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cRealKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cUserTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cDefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDefTypeDefCrossReference_3_1_0 = (CrossReference)cDefAssignment_3_1.eContents().get(0);
		private final RuleCall cDefTypeDefIDTerminalRuleCall_3_1_0_1 = (RuleCall)cDefTypeDefCrossReference_3_1_0.eContents().get(1);
		
		//Type:
		//	{IntType} 'int'
		//	| {BoolType} 'bool'
		//	| {RealType} 'real'
		//	| {UserType} def=[TypeDef];
		@Override public ParserRule getRule() { return rule; }

		//{IntType} 'int' | {BoolType} 'bool' | {RealType} 'real' | {UserType} def=[TypeDef]
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntType} 'int'
		public Group getGroup_0() { return cGroup_0; }

		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }

		//'int'
		public Keyword getIntKeyword_0_1() { return cIntKeyword_0_1; }

		//{BoolType} 'bool'
		public Group getGroup_1() { return cGroup_1; }

		//{BoolType}
		public Action getBoolTypeAction_1_0() { return cBoolTypeAction_1_0; }

		//'bool'
		public Keyword getBoolKeyword_1_1() { return cBoolKeyword_1_1; }

		//{RealType} 'real'
		public Group getGroup_2() { return cGroup_2; }

		//{RealType}
		public Action getRealTypeAction_2_0() { return cRealTypeAction_2_0; }

		//'real'
		public Keyword getRealKeyword_2_1() { return cRealKeyword_2_1; }

		//{UserType} def=[TypeDef]
		public Group getGroup_3() { return cGroup_3; }

		//{UserType}
		public Action getUserTypeAction_3_0() { return cUserTypeAction_3_0; }

		//def=[TypeDef]
		public Assignment getDefAssignment_3_1() { return cDefAssignment_3_1; }

		//[TypeDef]
		public CrossReference getDefTypeDefCrossReference_3_1_0() { return cDefTypeDefCrossReference_3_1_0; }

		//ID
		public RuleCall getDefTypeDefIDTerminalRuleCall_3_1_0_1() { return cDefTypeDefIDTerminalRuleCall_3_1_0_1; }
	}

	public class IdTypeDelimiterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.IdTypeDelimiter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIsAKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIsAnKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//IdTypeDelimiter:
		//	':'
		//	| 'is a'
		//	| 'is an';
		@Override public ParserRule getRule() { return rule; }

		//':' | 'is a' | 'is an'
		public Alternatives getAlternatives() { return cAlternatives; }

		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//'is a'
		public Keyword getIsAKeyword_1() { return cIsAKeyword_1; }

		//'is an'
		public Keyword getIsAnKeyword_2() { return cIsAnKeyword_2; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cIdTypeDelimiterParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		
		//Constant:
		//	name=ID IdTypeDelimiter type=Type '=' expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//name=ID IdTypeDelimiter type=Type '=' expr=Expr
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//IdTypeDelimiter
		public RuleCall getIdTypeDelimiterParserRuleCall_1() { return cIdTypeDelimiterParserRuleCall_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expr=Expr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_0() { return cExprExprParserRuleCall_4_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cIdTypeDelimiterParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Variable:
		//	name=ID IdTypeDelimiter type=Type;
		@Override public ParserRule getRule() { return rule; }

		//name=ID IdTypeDelimiter type=Type
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//IdTypeDelimiter
		public RuleCall getIdTypeDelimiterParserRuleCall_1() { return cIdTypeDelimiterParserRuleCall_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.Macro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cIdTypeDelimiterParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		
		//Macro:
		//	name=ID IdTypeDelimiter type=Type '=' expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//name=ID IdTypeDelimiter type=Type '=' expr=Expr
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//IdTypeDelimiter
		public RuleCall getIdTypeDelimiterParserRuleCall_1() { return cIdTypeDelimiterParserRuleCall_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expr=Expr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_0() { return cExprExprParserRuleCall_4_0; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFormalConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnglishConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Constraint:
		//	FormalConstraint | EnglishConstraint;
		@Override public ParserRule getRule() { return rule; }

		//FormalConstraint | EnglishConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//FormalConstraint
		public RuleCall getFormalConstraintParserRuleCall_0() { return cFormalConstraintParserRuleCall_0; }

		//EnglishConstraint
		public RuleCall getEnglishConstraintParserRuleCall_1() { return cEnglishConstraintParserRuleCall_1; }
	}

	public class FormalConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.FormalConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTextKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDescriptorAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDescriptorSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cDescriptorAssignment_3_2.eContents().get(0);
		
		//FormalConstraint:
		//	name=ID '=' expr=Expr ('text' '=' descriptor=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID '=' expr=Expr ('text' '=' descriptor=STRING)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }

		//('text' '=' descriptor=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//'text'
		public Keyword getTextKeyword_3_0() { return cTextKeyword_3_0; }

		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }

		//descriptor=STRING
		public Assignment getDescriptorAssignment_3_2() { return cDescriptorAssignment_3_2; }

		//STRING
		public RuleCall getDescriptorSTRINGTerminalRuleCall_3_2_0() { return cDescriptorSTRINGTerminalRuleCall_3_2_0; }
	}

	public class EnglishConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.EnglishConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		//EnglishConstraint:
		//	name=ID '=' text=STRING;
		@Override public ParserRule getRule() { return rule; }

		//name=ID '=' text=STRING
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.Expr");
		private final RuleCall cImpliesExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// * Begin Expr Language * / Expr:
		//	ImpliesExpr;
		@Override public ParserRule getRule() { return rule; }

		//ImpliesExpr
		public RuleCall getImpliesExprParserRuleCall() { return cImpliesExprParserRuleCall; }
	}

	public class ImpliesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.ImpliesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpImpliesKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightImpliesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ImpliesExpr Expr:
		//	OrExpr (=> ({BinaryExpr.left=current} op=('=>' | 'implies')) right=ImpliesExpr)?
		@Override public ParserRule getRule() { return rule; }

		//OrExpr (=> ({BinaryExpr.left=current} op=('=>' | 'implies')) right=ImpliesExpr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('=>' | 'implies')) right=ImpliesExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('=>' | 'implies'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=('=>' | 'implies'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('=>' | 'implies')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('=>' | 'implies')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'=>'
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0_0() { return cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0_0; }

		//'implies'
		public Keyword getOpImpliesKeyword_1_0_0_1_0_1() { return cOpImpliesKeyword_1_0_0_1_0_1; }

		//right=ImpliesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ImpliesExpr
		public RuleCall getRightImpliesExprParserRuleCall_1_1_0() { return cRightImpliesExprParserRuleCall_1_1_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpOrKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpXorKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightImpliesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpr Expr:
		//	AndExpr (=> ({BinaryExpr.left=current} op=('or' | 'xor')) right=ImpliesExpr)?
		@Override public ParserRule getRule() { return rule; }

		//AndExpr (=> ({BinaryExpr.left=current} op=('or' | 'xor')) right=ImpliesExpr)?
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('or' | 'xor')) right=ImpliesExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('or' | 'xor'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=('or' | 'xor'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('or' | 'xor')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('or' | 'xor')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'or'
		public Keyword getOpOrKeyword_1_0_0_1_0_0() { return cOpOrKeyword_1_0_0_1_0_0; }

		//'xor'
		public Keyword getOpXorKeyword_1_0_0_1_0_1() { return cOpXorKeyword_1_0_0_1_0_1; }

		//right=ImpliesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ImpliesExpr
		public RuleCall getRightImpliesExprParserRuleCall_1_1_0() { return cRightImpliesExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTriggersExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAndKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpr Expr:
		//	TriggersExpr (=> ({BinaryExpr.left=current} op='and') right=AndExpr)?
		@Override public ParserRule getRule() { return rule; }

		//TriggersExpr (=> ({BinaryExpr.left=current} op='and') right=AndExpr)?
		public Group getGroup() { return cGroup; }

		//TriggersExpr
		public RuleCall getTriggersExprParserRuleCall_0() { return cTriggersExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op='and') right=AndExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op='and')
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op='and')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op='and'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//'and'
		public Keyword getOpAndKeyword_1_0_0_1_0() { return cOpAndKeyword_1_0_0_1_0; }

		//right=AndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_1_0() { return cRightAndExprParserRuleCall_1_1_0; }
	}

	public class TriggersExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.TriggersExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSinceExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpTKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpTriggersKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTriggersExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//TriggersExpr Expr:
		//	SinceExpr (=> ({BinaryExpr.left=current} op=('T' | 'triggers')) right=TriggersExpr)?
		@Override public ParserRule getRule() { return rule; }

		//SinceExpr (=> ({BinaryExpr.left=current} op=('T' | 'triggers')) right=TriggersExpr)?
		public Group getGroup() { return cGroup; }

		//SinceExpr
		public RuleCall getSinceExprParserRuleCall_0() { return cSinceExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('T' | 'triggers')) right=TriggersExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('T' | 'triggers'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=('T' | 'triggers'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('T' | 'triggers')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('T' | 'triggers')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'T'
		public Keyword getOpTKeyword_1_0_0_1_0_0() { return cOpTKeyword_1_0_0_1_0_0; }

		//'triggers'
		public Keyword getOpTriggersKeyword_1_0_0_1_0_1() { return cOpTriggersKeyword_1_0_0_1_0_1; }

		//right=TriggersExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//TriggersExpr
		public RuleCall getRightTriggersExprParserRuleCall_1_1_0() { return cRightTriggersExprParserRuleCall_1_1_0; }
	}

	public class SinceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.SinceExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTemporalPrefixExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpSKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpSinceKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSinceExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//SinceExpr Expr:
		//	TemporalPrefixExpr (=> ({BinaryExpr.left=current} op=('S' | 'since')) right=SinceExpr)?
		@Override public ParserRule getRule() { return rule; }

		//TemporalPrefixExpr (=> ({BinaryExpr.left=current} op=('S' | 'since')) right=SinceExpr)?
		public Group getGroup() { return cGroup; }

		//TemporalPrefixExpr
		public RuleCall getTemporalPrefixExprParserRuleCall_0() { return cTemporalPrefixExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('S' | 'since')) right=SinceExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('S' | 'since'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=('S' | 'since'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('S' | 'since')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('S' | 'since')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'S'
		public Keyword getOpSKeyword_1_0_0_1_0_0() { return cOpSKeyword_1_0_0_1_0_0; }

		//'since'
		public Keyword getOpSinceKeyword_1_0_0_1_0_1() { return cOpSinceKeyword_1_0_0_1_0_1; }

		//right=SinceExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//SinceExpr
		public RuleCall getRightSinceExprParserRuleCall_1_1_0() { return cRightSinceExprParserRuleCall_1_1_0; }
	}

	public class TemporalPrefixExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.TemporalPrefixExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpOKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpOnceKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Keyword cOpHKeyword_0_1_0_2 = (Keyword)cOpAlternatives_0_1_0.eContents().get(2);
		private final Keyword cOpHistoricallyKeyword_0_1_0_3 = (Keyword)cOpAlternatives_0_1_0.eContents().get(3);
		private final Keyword cOpNeverKeyword_0_1_0_4 = (Keyword)cOpAlternatives_0_1_0.eContents().get(4);
		private final Keyword cOpBeforeKeyword_0_1_0_5 = (Keyword)cOpAlternatives_0_1_0.eContents().get(5);
		private final Keyword cOpInitiallyKeyword_0_1_0_6 = (Keyword)cOpAlternatives_0_1_0.eContents().get(6);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprTemporalPrefixExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cRelationalExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TemporalPrefixExpr Expr:
		//	{UnaryExpr} op=('O' | 'once' | 'H' | 'historically' | 'never' | 'before' | 'initially') expr=TemporalPrefixExpr
		//	| RelationalExpr
		@Override public ParserRule getRule() { return rule; }

		//{UnaryExpr} op=('O' | 'once' | 'H' | 'historically' | 'never' | 'before' | 'initially') expr=TemporalPrefixExpr |
		//RelationalExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpr} op=('O' | 'once' | 'H' | 'historically' | 'never' | 'before' | 'initially') expr=TemporalPrefixExpr
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpr}
		public Action getUnaryExprAction_0_0() { return cUnaryExprAction_0_0; }

		//op=('O' | 'once' | 'H' | 'historically' | 'never' | 'before' | 'initially')
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//('O' | 'once' | 'H' | 'historically' | 'never' | 'before' | 'initially')
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//'O'
		public Keyword getOpOKeyword_0_1_0_0() { return cOpOKeyword_0_1_0_0; }

		//'once'
		public Keyword getOpOnceKeyword_0_1_0_1() { return cOpOnceKeyword_0_1_0_1; }

		//'H'
		public Keyword getOpHKeyword_0_1_0_2() { return cOpHKeyword_0_1_0_2; }

		//'historically'
		public Keyword getOpHistoricallyKeyword_0_1_0_3() { return cOpHistoricallyKeyword_0_1_0_3; }

		//'never'
		public Keyword getOpNeverKeyword_0_1_0_4() { return cOpNeverKeyword_0_1_0_4; }

		//'before'
		public Keyword getOpBeforeKeyword_0_1_0_5() { return cOpBeforeKeyword_0_1_0_5; }

		//'initially'
		public Keyword getOpInitiallyKeyword_0_1_0_6() { return cOpInitiallyKeyword_0_1_0_6; }

		//expr=TemporalPrefixExpr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//TemporalPrefixExpr
		public RuleCall getExprTemporalPrefixExprParserRuleCall_0_2_0() { return cExprTemporalPrefixExprParserRuleCall_0_2_0; }

		//RelationalExpr
		public RuleCall getRelationalExprParserRuleCall_1() { return cRelationalExprParserRuleCall_1; }
	}

	public class RelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.RelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpRelationalOpParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRelationalExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpr Expr:
		//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=RelationalExpr)?
		@Override public ParserRule getRule() { return rule; }

		//PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=RelationalExpr)?
		public Group getGroup() { return cGroup; }

		//PlusExpr
		public RuleCall getPlusExprParserRuleCall_0() { return cPlusExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=RelationalOp) right=RelationalExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=RelationalOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=RelationalOp)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=RelationalOp
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//RelationalOp
		public RuleCall getOpRelationalOpParserRuleCall_1_0_0_1_0() { return cOpRelationalOpParserRuleCall_1_0_0_1_0; }

		//right=RelationalExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//RelationalExpr
		public RuleCall getRightRelationalExprParserRuleCall_1_1_0() { return cRightRelationalExprParserRuleCall_1_1_0; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cThanKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLessKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cThanKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cOrKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cEqualKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cToKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cGreaterKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cThanKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cGreaterKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cThanKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cOrKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Keyword cEqualKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cToKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cEqualsSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cEqualKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cToKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cLessThanSignGreaterThanSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cNotKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cEqualKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cToKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		
		////This adds some english equivalents to the Relational Operators for a more english look and feel
		//RelationalOp:
		//	'<' | 'less' 'than'
		//	| '<=' | 'less' 'than' 'or' 'equal' 'to'
		//	| '>' | 'greater' 'than'
		//	| '>=' | 'greater' 'than' 'or' 'equal' 'to'
		//	| '==' | 'equal' 'to'
		//	| '<>' | 'not' 'equal' 'to';
		@Override public ParserRule getRule() { return rule; }

		//'<' | 'less' 'than' | '<=' | 'less' 'than' 'or' 'equal' 'to' | '>' | 'greater' 'than' | '>=' | 'greater' 'than' 'or'
		//'equal' 'to' | '==' | 'equal' 'to' | '<>' | 'not' 'equal' 'to'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//'less' 'than'
		public Group getGroup_1() { return cGroup_1; }

		//'less'
		public Keyword getLessKeyword_1_0() { return cLessKeyword_1_0; }

		//'than'
		public Keyword getThanKeyword_1_1() { return cThanKeyword_1_1; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }

		//'less' 'than' 'or' 'equal' 'to'
		public Group getGroup_3() { return cGroup_3; }

		//'less'
		public Keyword getLessKeyword_3_0() { return cLessKeyword_3_0; }

		//'than'
		public Keyword getThanKeyword_3_1() { return cThanKeyword_3_1; }

		//'or'
		public Keyword getOrKeyword_3_2() { return cOrKeyword_3_2; }

		//'equal'
		public Keyword getEqualKeyword_3_3() { return cEqualKeyword_3_3; }

		//'to'
		public Keyword getToKeyword_3_4() { return cToKeyword_3_4; }

		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//'greater' 'than'
		public Group getGroup_5() { return cGroup_5; }

		//'greater'
		public Keyword getGreaterKeyword_5_0() { return cGreaterKeyword_5_0; }

		//'than'
		public Keyword getThanKeyword_5_1() { return cThanKeyword_5_1; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }

		//'greater' 'than' 'or' 'equal' 'to'
		public Group getGroup_7() { return cGroup_7; }

		//'greater'
		public Keyword getGreaterKeyword_7_0() { return cGreaterKeyword_7_0; }

		//'than'
		public Keyword getThanKeyword_7_1() { return cThanKeyword_7_1; }

		//'or'
		public Keyword getOrKeyword_7_2() { return cOrKeyword_7_2; }

		//'equal'
		public Keyword getEqualKeyword_7_3() { return cEqualKeyword_7_3; }

		//'to'
		public Keyword getToKeyword_7_4() { return cToKeyword_7_4; }

		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_8() { return cEqualsSignEqualsSignKeyword_8; }

		//'equal' 'to'
		public Group getGroup_9() { return cGroup_9; }

		//'equal'
		public Keyword getEqualKeyword_9_0() { return cEqualKeyword_9_0; }

		//'to'
		public Keyword getToKeyword_9_1() { return cToKeyword_9_1; }

		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_10() { return cLessThanSignGreaterThanSignKeyword_10; }

		//'not' 'equal' 'to'
		public Group getGroup_11() { return cGroup_11; }

		//'not'
		public Keyword getNotKeyword_11_0() { return cNotKeyword_11_0; }

		//'equal'
		public Keyword getEqualKeyword_11_1() { return cEqualKeyword_11_1; }

		//'to'
		public Keyword getToKeyword_11_2() { return cToKeyword_11_2; }
	}

	public class PlusExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.PlusExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplyExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPlusExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusExpr Expr:
		//	MultiplyExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=PlusExpr)?
		@Override public ParserRule getRule() { return rule; }

		//MultiplyExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=PlusExpr)?
		public Group getGroup() { return cGroup; }

		//MultiplyExpr
		public RuleCall getMultiplyExprParserRuleCall_0() { return cMultiplyExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('+' | '-')) right=PlusExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('+' | '-'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=('+' | '-'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('+' | '-')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('+' | '-')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1_0_0() { return cOpPlusSignKeyword_1_0_0_1_0_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_0_1_0_1; }

		//right=PlusExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PlusExpr
		public RuleCall getRightPlusExprParserRuleCall_1_1_0() { return cRightPlusExprParserRuleCall_1_1_0; }
	}

	public class MultiplyExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.MultiplyExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplyExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplyExpr Expr:
		//	PrefixExpr (=> ({BinaryExpr.left=current} op=('*' | '/')) right=MultiplyExpr)?
		@Override public ParserRule getRule() { return rule; }

		//PrefixExpr (=> ({BinaryExpr.left=current} op=('*' | '/')) right=MultiplyExpr)?
		public Group getGroup() { return cGroup; }

		//PrefixExpr
		public RuleCall getPrefixExprParserRuleCall_0() { return cPrefixExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=('*' | '/')) right=MultiplyExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=('*' | '/'))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({BinaryExpr.left=current} op=('*' | '/'))
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=('*' | '/')
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//('*' | '/')
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0_1_0_0() { return cOpAsteriskKeyword_1_0_0_1_0_0; }

		//'/'
		public Keyword getOpSolidusKeyword_1_0_0_1_0_1() { return cOpSolidusKeyword_1_0_0_1_0_1; }

		//right=MultiplyExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplyExpr
		public RuleCall getRightMultiplyExprParserRuleCall_1_1_0() { return cRightMultiplyExprParserRuleCall_1_1_0; }
	}

	public class PrefixExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.PrefixExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpNotKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprPrefixExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cAccessExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////the sugary Unary operators are never, before, after (the last three)
		//// | 'O' | 'once' | 'H' | 'historically' | 'never' | 'before' | 'after'
		//PrefixExpr Expr:
		//	{UnaryExpr} op=('-' | 'not') expr=PrefixExpr
		//	| AccessExpr
		@Override public ParserRule getRule() { return rule; }

		//{UnaryExpr} op=('-' | 'not') expr=PrefixExpr | AccessExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpr} op=('-' | 'not') expr=PrefixExpr
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpr}
		public Action getUnaryExprAction_0_0() { return cUnaryExprAction_0_0; }

		//op=('-' | 'not')
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//('-' | 'not')
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_0_1_0_0() { return cOpHyphenMinusKeyword_0_1_0_0; }

		//'not'
		public Keyword getOpNotKeyword_0_1_0_1() { return cOpNotKeyword_0_1_0_1; }

		//expr=PrefixExpr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//PrefixExpr
		public RuleCall getExprPrefixExprParserRuleCall_0_2_0() { return cExprPrefixExprParserRuleCall_0_2_0; }

		//AccessExpr
		public RuleCall getAccessExprParserRuleCall_1() { return cAccessExprParserRuleCall_1; }
	}

	public class AccessExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.AccessExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cRecordAccessExprRecordAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cFieldAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cFieldRecordFieldExprCrossReference_1_0_1_0 = (CrossReference)cFieldAssignment_1_0_1.eContents().get(0);
		private final RuleCall cFieldRecordFieldExprIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cFieldRecordFieldExprCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cRecordUpdateExprRecordAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Assignment cFieldAssignment_1_1_0_0_2 = (Assignment)cGroup_1_1_0_0.eContents().get(2);
		private final CrossReference cFieldRecordFieldExprCrossReference_1_1_0_0_2_0 = (CrossReference)cFieldAssignment_1_1_0_0_2.eContents().get(0);
		private final RuleCall cFieldRecordFieldExprIDTerminalRuleCall_1_1_0_0_2_0_1 = (RuleCall)cFieldRecordFieldExprCrossReference_1_1_0_0_2_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_1_0_0_3 = (Keyword)cGroup_1_1_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueExprParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cArrayAccessExprArrayAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2_0_0_1 = (Keyword)cGroup_1_2_0_0.eContents().get(1);
		private final Assignment cIndexAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIndexExprParserRuleCall_1_2_1_0 = (RuleCall)cIndexAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_2_2_0 = (Group)cGroup_1_2_2.eContents().get(0);
		private final Group cGroup_1_2_2_0_0 = (Group)cGroup_1_2_2_0.eContents().get(0);
		private final Action cArrayUpdateExprAccessAction_1_2_2_0_0_0 = (Action)cGroup_1_2_2_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2_2_0_0_1 = (Keyword)cGroup_1_2_2_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cValueExprParserRuleCall_1_2_2_1_0 = (RuleCall)cValueAssignment_1_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		
		//AccessExpr Expr:
		//	AtomicExpr (=> ({RecordAccessExpr.record=current} '.') field=[RecordFieldExpr] | =>
		//	({RecordUpdateExpr.record=current} '{' field=[RecordFieldExpr] ':=') value=Expr '}'
		//	| => ({ArrayAccessExpr.array=current} '[') index=Expr (=> ({ArrayUpdateExpr.access=current} ':=') value=Expr)? ']')*
		@Override public ParserRule getRule() { return rule; }

		//AtomicExpr (=> ({RecordAccessExpr.record=current} '.') field=[RecordFieldExpr] | => ({RecordUpdateExpr.record=current}
		//'{' field=[RecordFieldExpr] ':=') value=Expr '}' | => ({ArrayAccessExpr.array=current} '[') index=Expr (=>
		//({ArrayUpdateExpr.access=current} ':=') value=Expr)? ']')*
		public Group getGroup() { return cGroup; }

		//AtomicExpr
		public RuleCall getAtomicExprParserRuleCall_0() { return cAtomicExprParserRuleCall_0; }

		//(=> ({RecordAccessExpr.record=current} '.') field=[RecordFieldExpr] | => ({RecordUpdateExpr.record=current} '{'
		//field=[RecordFieldExpr] ':=') value=Expr '}' | => ({ArrayAccessExpr.array=current} '[') index=Expr (=>
		//({ArrayUpdateExpr.access=current} ':=') value=Expr)? ']')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({RecordAccessExpr.record=current} '.') field=[RecordFieldExpr]
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({RecordAccessExpr.record=current} '.')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//({RecordAccessExpr.record=current} '.')
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{RecordAccessExpr.record=current}
		public Action getRecordAccessExprRecordAction_1_0_0_0_0() { return cRecordAccessExprRecordAction_1_0_0_0_0; }

		//'.'
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }

		//field=[RecordFieldExpr]
		public Assignment getFieldAssignment_1_0_1() { return cFieldAssignment_1_0_1; }

		//[RecordFieldExpr]
		public CrossReference getFieldRecordFieldExprCrossReference_1_0_1_0() { return cFieldRecordFieldExprCrossReference_1_0_1_0; }

		//ID
		public RuleCall getFieldRecordFieldExprIDTerminalRuleCall_1_0_1_0_1() { return cFieldRecordFieldExprIDTerminalRuleCall_1_0_1_0_1; }

		//=> ({RecordUpdateExpr.record=current} '{' field=[RecordFieldExpr] ':=') value=Expr '}'
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({RecordUpdateExpr.record=current} '{' field=[RecordFieldExpr] ':=')
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//({RecordUpdateExpr.record=current} '{' field=[RecordFieldExpr] ':=')
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{RecordUpdateExpr.record=current}
		public Action getRecordUpdateExprRecordAction_1_1_0_0_0() { return cRecordUpdateExprRecordAction_1_1_0_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1_0_0_1() { return cLeftCurlyBracketKeyword_1_1_0_0_1; }

		//field=[RecordFieldExpr]
		public Assignment getFieldAssignment_1_1_0_0_2() { return cFieldAssignment_1_1_0_0_2; }

		//[RecordFieldExpr]
		public CrossReference getFieldRecordFieldExprCrossReference_1_1_0_0_2_0() { return cFieldRecordFieldExprCrossReference_1_1_0_0_2_0; }

		//ID
		public RuleCall getFieldRecordFieldExprIDTerminalRuleCall_1_1_0_0_2_0_1() { return cFieldRecordFieldExprIDTerminalRuleCall_1_1_0_0_2_0_1; }

		//':='
		public Keyword getColonEqualsSignKeyword_1_1_0_0_3() { return cColonEqualsSignKeyword_1_1_0_0_3; }

		//value=Expr
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }

		//Expr
		public RuleCall getValueExprParserRuleCall_1_1_1_0() { return cValueExprParserRuleCall_1_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }

		//=> ({ArrayAccessExpr.array=current} '[') index=Expr (=> ({ArrayUpdateExpr.access=current} ':=') value=Expr)? ']'
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({ArrayAccessExpr.array=current} '[')
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//({ArrayAccessExpr.array=current} '[')
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{ArrayAccessExpr.array=current}
		public Action getArrayAccessExprArrayAction_1_2_0_0_0() { return cArrayAccessExprArrayAction_1_2_0_0_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_0_0_1() { return cLeftSquareBracketKeyword_1_2_0_0_1; }

		//index=Expr
		public Assignment getIndexAssignment_1_2_1() { return cIndexAssignment_1_2_1; }

		//Expr
		public RuleCall getIndexExprParserRuleCall_1_2_1_0() { return cIndexExprParserRuleCall_1_2_1_0; }

		//(=> ({ArrayUpdateExpr.access=current} ':=') value=Expr)?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//=> ({ArrayUpdateExpr.access=current} ':=')
		public Group getGroup_1_2_2_0() { return cGroup_1_2_2_0; }

		//({ArrayUpdateExpr.access=current} ':=')
		public Group getGroup_1_2_2_0_0() { return cGroup_1_2_2_0_0; }

		//{ArrayUpdateExpr.access=current}
		public Action getArrayUpdateExprAccessAction_1_2_2_0_0_0() { return cArrayUpdateExprAccessAction_1_2_2_0_0_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_1_2_2_0_0_1() { return cColonEqualsSignKeyword_1_2_2_0_0_1; }

		//value=Expr
		public Assignment getValueAssignment_1_2_2_1() { return cValueAssignment_1_2_2_1; }

		//Expr
		public RuleCall getValueExprParserRuleCall_1_2_2_1_0() { return cValueExprParserRuleCall_1_2_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2_3() { return cRightSquareBracketKeyword_1_2_3; }
	}

	public class AtomicExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.AtomicExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIdExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cIdIdRefCrossReference_1_1_0 = (CrossReference)cIdAssignment_1_1.eContents().get(0);
		private final RuleCall cIdIdRefIDTerminalRuleCall_1_1_0_1 = (RuleCall)cIdIdRefCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMIdExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIdsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cIdsIdRefCrossReference_2_2_0 = (CrossReference)cIdsAssignment_2_2.eContents().get(0);
		private final RuleCall cIdsIdRefIDTerminalRuleCall_2_2_0_1 = (RuleCall)cIdsIdRefCrossReference_2_2_0.eContents().get(1);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cIdsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final CrossReference cIdsIdRefCrossReference_2_3_1_0 = (CrossReference)cIdsAssignment_2_3_1.eContents().get(0);
		private final RuleCall cIdsIdRefIDTerminalRuleCall_2_3_1_0_1 = (RuleCall)cIdsIdRefCrossReference_2_3_1_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPreviousExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cPrevKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cVarAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cVarExprParserRuleCall_3_3_0 = (RuleCall)cVarAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cInitAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cInitExprParserRuleCall_3_5_0 = (RuleCall)cInitAssignment_3_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cIfThenElseExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cIfKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCondAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCondExprParserRuleCall_4_2_0 = (RuleCall)cCondAssignment_4_2.eContents().get(0);
		private final Keyword cThenKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cThenAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cThenExprParserRuleCall_4_4_0 = (RuleCall)cThenAssignment_4_4.eContents().get(0);
		private final Group cGroup_4_5 = (Group)cGroup_4.eContents().get(5);
		private final Keyword cElseKeyword_4_5_0 = (Keyword)cGroup_4_5.eContents().get(0);
		private final Assignment cElseAssignment_4_5_1 = (Assignment)cGroup_4_5.eContents().get(1);
		private final RuleCall cElseExprParserRuleCall_4_5_1_0 = (RuleCall)cElseAssignment_4_5_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cAfterUntilExprAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cAfterKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAfterAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAfterExprParserRuleCall_5_2_0 = (RuleCall)cAfterAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cUntilKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cUntilAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cUntilExprParserRuleCall_5_3_1_0 = (RuleCall)cUntilAssignment_5_3_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cWhileExprAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cWhileKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cCondAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cCondExprParserRuleCall_6_2_0 = (RuleCall)cCondAssignment_6_2.eContents().get(0);
		private final Keyword cThenKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cThenAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cThenExprParserRuleCall_6_4_0 = (RuleCall)cThenAssignment_6_4.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cRecordExprAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cNewKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cTypeAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cTypeRecordTypeCrossReference_7_2_0 = (CrossReference)cTypeAssignment_7_2.eContents().get(0);
		private final RuleCall cTypeRecordTypeIDTerminalRuleCall_7_2_0_1 = (RuleCall)cTypeRecordTypeCrossReference_7_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cFieldExprsAssignment_7_4 = (Assignment)cGroup_7.eContents().get(4);
		private final RuleCall cFieldExprsRecordFieldExprParserRuleCall_7_4_0 = (RuleCall)cFieldExprsAssignment_7_4.eContents().get(0);
		private final Group cGroup_7_5 = (Group)cGroup_7.eContents().get(5);
		private final Keyword cCommaKeyword_7_5_0 = (Keyword)cGroup_7_5.eContents().get(0);
		private final Assignment cFieldExprsAssignment_7_5_1 = (Assignment)cGroup_7_5.eContents().get(1);
		private final RuleCall cFieldExprsRecordFieldExprParserRuleCall_7_5_1_0 = (RuleCall)cFieldExprsAssignment_7_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cArrayExprAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cNewKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cTypeAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final CrossReference cTypeArrayTypeCrossReference_8_2_0 = (CrossReference)cTypeAssignment_8_2.eContents().get(0);
		private final RuleCall cTypeArrayTypeIDTerminalRuleCall_8_2_0_1 = (RuleCall)cTypeArrayTypeCrossReference_8_2_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Assignment cExprsAssignment_8_4 = (Assignment)cGroup_8.eContents().get(4);
		private final RuleCall cExprsExprParserRuleCall_8_4_0 = (RuleCall)cExprsAssignment_8_4.eContents().get(0);
		private final Group cGroup_8_5 = (Group)cGroup_8.eContents().get(5);
		private final Keyword cCommaKeyword_8_5_0 = (Keyword)cGroup_8_5.eContents().get(0);
		private final Assignment cExprsAssignment_8_5_1 = (Assignment)cGroup_8_5.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_8_5_1_0 = (RuleCall)cExprsAssignment_8_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_6 = (Keyword)cGroup_8.eContents().get(6);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cPatternCallAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cPatternKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cPatternAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final CrossReference cPatternPatternCrossReference_9_2_0 = (CrossReference)cPatternAssignment_9_2.eContents().get(0);
		private final RuleCall cPatternPatternIDTerminalRuleCall_9_2_0_1 = (RuleCall)cPatternPatternCrossReference_9_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cArgsAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final RuleCall cArgsExprParserRuleCall_9_4_0 = (RuleCall)cArgsAssignment_9_4.eContents().get(0);
		private final Group cGroup_9_5 = (Group)cGroup_9.eContents().get(5);
		private final Keyword cCommaKeyword_9_5_0 = (Keyword)cGroup_9_5.eContents().get(0);
		private final Assignment cArgsAssignment_9_5_1 = (Assignment)cGroup_9_5.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_9_5_1_0 = (RuleCall)cArgsAssignment_9_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_6 = (Keyword)cGroup_9.eContents().get(6);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cSpecificationCallAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cSpecKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cSpecAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final CrossReference cSpecSpecificationCrossReference_10_2_0 = (CrossReference)cSpecAssignment_10_2.eContents().get(0);
		private final RuleCall cSpecSpecificationIDTerminalRuleCall_10_2_0_1 = (RuleCall)cSpecSpecificationCrossReference_10_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Assignment cArgsAssignment_10_4 = (Assignment)cGroup_10.eContents().get(4);
		private final RuleCall cArgsExprParserRuleCall_10_4_0 = (RuleCall)cArgsAssignment_10_4.eContents().get(0);
		private final Group cGroup_10_5 = (Group)cGroup_10.eContents().get(5);
		private final Keyword cCommaKeyword_10_5_0 = (Keyword)cGroup_10_5.eContents().get(0);
		private final Assignment cArgsAssignment_10_5_1 = (Assignment)cGroup_10_5.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_10_5_1_0 = (RuleCall)cArgsAssignment_10_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_6 = (Keyword)cGroup_10.eContents().get(6);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cLeftParenthesisKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final RuleCall cExprParserRuleCall_11_1 = (RuleCall)cGroup_11.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		
		//AtomicExpr Expr:
		//	LiteralExpr
		//	| {IdExpr} id=[IdRef] | {MIdExpr} '|' ids+=[IdRef] (',' ids+=[IdRef])* '|'
		//	| {PreviousExpr} 'prev' '(' var=Expr ',' init=Expr ')'
		//	| {IfThenElseExpr} 'if' cond=Expr 'then' then=Expr (=> 'else' else=Expr)?
		//	| {AfterUntilExpr} 'after' after=Expr (=> 'until' until=Expr)?
		//	| {WhileExpr} 'while' cond=Expr 'then' then=Expr
		//	| {RecordExpr} 'new' type=[RecordType] '{' fieldExprs+=RecordFieldExpr (',' fieldExprs+=RecordFieldExpr)* '}'
		//	| {ArrayExpr} 'new' type=[ArrayType] '[' exprs+=Expr (',' exprs+=Expr)* ']'
		//	| {PatternCall} 'pattern' pattern=[Pattern] '(' args+=Expr (',' args+=Expr)* ')'
		//	| {SpecificationCall} 'spec' spec=[Specification] '(' args+=Expr (',' args+=Expr)* ')'
		//	| '(' Expr ')'
		@Override public ParserRule getRule() { return rule; }

		//LiteralExpr | {IdExpr} id=[IdRef] | {MIdExpr} '|' ids+=[IdRef] (',' ids+=[IdRef])* '|' | {PreviousExpr} 'prev' '('
		//var=Expr ',' init=Expr ')' | {IfThenElseExpr} 'if' cond=Expr 'then' then=Expr (=> 'else' else=Expr)? |
		//{AfterUntilExpr} 'after' after=Expr (=> 'until' until=Expr)? | {WhileExpr} 'while' cond=Expr 'then' then=Expr |
		//{RecordExpr} 'new' type=[RecordType] '{' fieldExprs+=RecordFieldExpr (',' fieldExprs+=RecordFieldExpr)* '}' |
		//{ArrayExpr} 'new' type=[ArrayType] '[' exprs+=Expr (',' exprs+=Expr)* ']' | {PatternCall} 'pattern' pattern=[Pattern]
		//'(' args+=Expr (',' args+=Expr)* ')' | {SpecificationCall} 'spec' spec=[Specification] '(' args+=Expr (','
		//args+=Expr)* ')' | '(' Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralExpr
		public RuleCall getLiteralExprParserRuleCall_0() { return cLiteralExprParserRuleCall_0; }

		//{IdExpr} id=[IdRef]
		public Group getGroup_1() { return cGroup_1; }

		//{IdExpr}
		public Action getIdExprAction_1_0() { return cIdExprAction_1_0; }

		//id=[IdRef]
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }

		//[IdRef]
		public CrossReference getIdIdRefCrossReference_1_1_0() { return cIdIdRefCrossReference_1_1_0; }

		//ID
		public RuleCall getIdIdRefIDTerminalRuleCall_1_1_0_1() { return cIdIdRefIDTerminalRuleCall_1_1_0_1; }

		//{MIdExpr} '|' ids+=[IdRef] (',' ids+=[IdRef])* '|'
		public Group getGroup_2() { return cGroup_2; }

		//{MIdExpr}
		public Action getMIdExprAction_2_0() { return cMIdExprAction_2_0; }

		//'|'
		public Keyword getVerticalLineKeyword_2_1() { return cVerticalLineKeyword_2_1; }

		//ids+=[IdRef]
		public Assignment getIdsAssignment_2_2() { return cIdsAssignment_2_2; }

		//[IdRef]
		public CrossReference getIdsIdRefCrossReference_2_2_0() { return cIdsIdRefCrossReference_2_2_0; }

		//ID
		public RuleCall getIdsIdRefIDTerminalRuleCall_2_2_0_1() { return cIdsIdRefIDTerminalRuleCall_2_2_0_1; }

		//(',' ids+=[IdRef])*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//ids+=[IdRef]
		public Assignment getIdsAssignment_2_3_1() { return cIdsAssignment_2_3_1; }

		//[IdRef]
		public CrossReference getIdsIdRefCrossReference_2_3_1_0() { return cIdsIdRefCrossReference_2_3_1_0; }

		//ID
		public RuleCall getIdsIdRefIDTerminalRuleCall_2_3_1_0_1() { return cIdsIdRefIDTerminalRuleCall_2_3_1_0_1; }

		//'|'
		public Keyword getVerticalLineKeyword_2_4() { return cVerticalLineKeyword_2_4; }

		//{PreviousExpr} 'prev' '(' var=Expr ',' init=Expr ')'
		public Group getGroup_3() { return cGroup_3; }

		//{PreviousExpr}
		public Action getPreviousExprAction_3_0() { return cPreviousExprAction_3_0; }

		//'prev'
		public Keyword getPrevKeyword_3_1() { return cPrevKeyword_3_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//var=Expr
		public Assignment getVarAssignment_3_3() { return cVarAssignment_3_3; }

		//Expr
		public RuleCall getVarExprParserRuleCall_3_3_0() { return cVarExprParserRuleCall_3_3_0; }

		//','
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }

		//init=Expr
		public Assignment getInitAssignment_3_5() { return cInitAssignment_3_5; }

		//Expr
		public RuleCall getInitExprParserRuleCall_3_5_0() { return cInitExprParserRuleCall_3_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_6() { return cRightParenthesisKeyword_3_6; }

		//{IfThenElseExpr} 'if' cond=Expr 'then' then=Expr (=> 'else' else=Expr)?
		public Group getGroup_4() { return cGroup_4; }

		//{IfThenElseExpr}
		public Action getIfThenElseExprAction_4_0() { return cIfThenElseExprAction_4_0; }

		//'if'
		public Keyword getIfKeyword_4_1() { return cIfKeyword_4_1; }

		//cond=Expr
		public Assignment getCondAssignment_4_2() { return cCondAssignment_4_2; }

		//Expr
		public RuleCall getCondExprParserRuleCall_4_2_0() { return cCondExprParserRuleCall_4_2_0; }

		//'then'
		public Keyword getThenKeyword_4_3() { return cThenKeyword_4_3; }

		//then=Expr
		public Assignment getThenAssignment_4_4() { return cThenAssignment_4_4; }

		//Expr
		public RuleCall getThenExprParserRuleCall_4_4_0() { return cThenExprParserRuleCall_4_4_0; }

		//(=> 'else' else=Expr)?
		public Group getGroup_4_5() { return cGroup_4_5; }

		//=> 'else'
		public Keyword getElseKeyword_4_5_0() { return cElseKeyword_4_5_0; }

		//else=Expr
		public Assignment getElseAssignment_4_5_1() { return cElseAssignment_4_5_1; }

		//Expr
		public RuleCall getElseExprParserRuleCall_4_5_1_0() { return cElseExprParserRuleCall_4_5_1_0; }

		//{AfterUntilExpr} 'after' after=Expr (=> 'until' until=Expr)?
		public Group getGroup_5() { return cGroup_5; }

		//{AfterUntilExpr}
		public Action getAfterUntilExprAction_5_0() { return cAfterUntilExprAction_5_0; }

		//'after'
		public Keyword getAfterKeyword_5_1() { return cAfterKeyword_5_1; }

		//after=Expr
		public Assignment getAfterAssignment_5_2() { return cAfterAssignment_5_2; }

		//Expr
		public RuleCall getAfterExprParserRuleCall_5_2_0() { return cAfterExprParserRuleCall_5_2_0; }

		//(=> 'until' until=Expr)?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//=> 'until'
		public Keyword getUntilKeyword_5_3_0() { return cUntilKeyword_5_3_0; }

		//until=Expr
		public Assignment getUntilAssignment_5_3_1() { return cUntilAssignment_5_3_1; }

		//Expr
		public RuleCall getUntilExprParserRuleCall_5_3_1_0() { return cUntilExprParserRuleCall_5_3_1_0; }

		//{WhileExpr} 'while' cond=Expr 'then' then=Expr
		public Group getGroup_6() { return cGroup_6; }

		//{WhileExpr}
		public Action getWhileExprAction_6_0() { return cWhileExprAction_6_0; }

		//'while'
		public Keyword getWhileKeyword_6_1() { return cWhileKeyword_6_1; }

		//cond=Expr
		public Assignment getCondAssignment_6_2() { return cCondAssignment_6_2; }

		//Expr
		public RuleCall getCondExprParserRuleCall_6_2_0() { return cCondExprParserRuleCall_6_2_0; }

		//'then'
		public Keyword getThenKeyword_6_3() { return cThenKeyword_6_3; }

		//then=Expr
		public Assignment getThenAssignment_6_4() { return cThenAssignment_6_4; }

		//Expr
		public RuleCall getThenExprParserRuleCall_6_4_0() { return cThenExprParserRuleCall_6_4_0; }

		//{RecordExpr} 'new' type=[RecordType] '{' fieldExprs+=RecordFieldExpr (',' fieldExprs+=RecordFieldExpr)* '}'
		public Group getGroup_7() { return cGroup_7; }

		//{RecordExpr}
		public Action getRecordExprAction_7_0() { return cRecordExprAction_7_0; }

		//'new'
		public Keyword getNewKeyword_7_1() { return cNewKeyword_7_1; }

		//type=[RecordType]
		public Assignment getTypeAssignment_7_2() { return cTypeAssignment_7_2; }

		//[RecordType]
		public CrossReference getTypeRecordTypeCrossReference_7_2_0() { return cTypeRecordTypeCrossReference_7_2_0; }

		//ID
		public RuleCall getTypeRecordTypeIDTerminalRuleCall_7_2_0_1() { return cTypeRecordTypeIDTerminalRuleCall_7_2_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_3() { return cLeftCurlyBracketKeyword_7_3; }

		//fieldExprs+=RecordFieldExpr
		public Assignment getFieldExprsAssignment_7_4() { return cFieldExprsAssignment_7_4; }

		//RecordFieldExpr
		public RuleCall getFieldExprsRecordFieldExprParserRuleCall_7_4_0() { return cFieldExprsRecordFieldExprParserRuleCall_7_4_0; }

		//(',' fieldExprs+=RecordFieldExpr)*
		public Group getGroup_7_5() { return cGroup_7_5; }

		//','
		public Keyword getCommaKeyword_7_5_0() { return cCommaKeyword_7_5_0; }

		//fieldExprs+=RecordFieldExpr
		public Assignment getFieldExprsAssignment_7_5_1() { return cFieldExprsAssignment_7_5_1; }

		//RecordFieldExpr
		public RuleCall getFieldExprsRecordFieldExprParserRuleCall_7_5_1_0() { return cFieldExprsRecordFieldExprParserRuleCall_7_5_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7_6() { return cRightCurlyBracketKeyword_7_6; }

		//{ArrayExpr} 'new' type=[ArrayType] '[' exprs+=Expr (',' exprs+=Expr)* ']'
		public Group getGroup_8() { return cGroup_8; }

		//{ArrayExpr}
		public Action getArrayExprAction_8_0() { return cArrayExprAction_8_0; }

		//'new'
		public Keyword getNewKeyword_8_1() { return cNewKeyword_8_1; }

		//type=[ArrayType]
		public Assignment getTypeAssignment_8_2() { return cTypeAssignment_8_2; }

		//[ArrayType]
		public CrossReference getTypeArrayTypeCrossReference_8_2_0() { return cTypeArrayTypeCrossReference_8_2_0; }

		//ID
		public RuleCall getTypeArrayTypeIDTerminalRuleCall_8_2_0_1() { return cTypeArrayTypeIDTerminalRuleCall_8_2_0_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_8_3() { return cLeftSquareBracketKeyword_8_3; }

		//exprs+=Expr
		public Assignment getExprsAssignment_8_4() { return cExprsAssignment_8_4; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_8_4_0() { return cExprsExprParserRuleCall_8_4_0; }

		//(',' exprs+=Expr)*
		public Group getGroup_8_5() { return cGroup_8_5; }

		//','
		public Keyword getCommaKeyword_8_5_0() { return cCommaKeyword_8_5_0; }

		//exprs+=Expr
		public Assignment getExprsAssignment_8_5_1() { return cExprsAssignment_8_5_1; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_8_5_1_0() { return cExprsExprParserRuleCall_8_5_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_8_6() { return cRightSquareBracketKeyword_8_6; }

		//{PatternCall} 'pattern' pattern=[Pattern] '(' args+=Expr (',' args+=Expr)* ')'
		public Group getGroup_9() { return cGroup_9; }

		//{PatternCall}
		public Action getPatternCallAction_9_0() { return cPatternCallAction_9_0; }

		//'pattern'
		public Keyword getPatternKeyword_9_1() { return cPatternKeyword_9_1; }

		//pattern=[Pattern]
		public Assignment getPatternAssignment_9_2() { return cPatternAssignment_9_2; }

		//[Pattern]
		public CrossReference getPatternPatternCrossReference_9_2_0() { return cPatternPatternCrossReference_9_2_0; }

		//ID
		public RuleCall getPatternPatternIDTerminalRuleCall_9_2_0_1() { return cPatternPatternIDTerminalRuleCall_9_2_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_9_3() { return cLeftParenthesisKeyword_9_3; }

		//args+=Expr
		public Assignment getArgsAssignment_9_4() { return cArgsAssignment_9_4; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_9_4_0() { return cArgsExprParserRuleCall_9_4_0; }

		//(',' args+=Expr)*
		public Group getGroup_9_5() { return cGroup_9_5; }

		//','
		public Keyword getCommaKeyword_9_5_0() { return cCommaKeyword_9_5_0; }

		//args+=Expr
		public Assignment getArgsAssignment_9_5_1() { return cArgsAssignment_9_5_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_9_5_1_0() { return cArgsExprParserRuleCall_9_5_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_9_6() { return cRightParenthesisKeyword_9_6; }

		//{SpecificationCall} 'spec' spec=[Specification] '(' args+=Expr (',' args+=Expr)* ')'
		public Group getGroup_10() { return cGroup_10; }

		//{SpecificationCall}
		public Action getSpecificationCallAction_10_0() { return cSpecificationCallAction_10_0; }

		//'spec'
		public Keyword getSpecKeyword_10_1() { return cSpecKeyword_10_1; }

		//spec=[Specification]
		public Assignment getSpecAssignment_10_2() { return cSpecAssignment_10_2; }

		//[Specification]
		public CrossReference getSpecSpecificationCrossReference_10_2_0() { return cSpecSpecificationCrossReference_10_2_0; }

		//ID
		public RuleCall getSpecSpecificationIDTerminalRuleCall_10_2_0_1() { return cSpecSpecificationIDTerminalRuleCall_10_2_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_10_3() { return cLeftParenthesisKeyword_10_3; }

		//args+=Expr
		public Assignment getArgsAssignment_10_4() { return cArgsAssignment_10_4; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_10_4_0() { return cArgsExprParserRuleCall_10_4_0; }

		//(',' args+=Expr)*
		public Group getGroup_10_5() { return cGroup_10_5; }

		//','
		public Keyword getCommaKeyword_10_5_0() { return cCommaKeyword_10_5_0; }

		//args+=Expr
		public Assignment getArgsAssignment_10_5_1() { return cArgsAssignment_10_5_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_10_5_1_0() { return cArgsExprParserRuleCall_10_5_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_10_6() { return cRightParenthesisKeyword_10_6; }

		//'(' Expr ')'
		public Group getGroup_11() { return cGroup_11; }

		//'('
		public Keyword getLeftParenthesisKeyword_11_0() { return cLeftParenthesisKeyword_11_0; }

		//Expr
		public RuleCall getExprParserRuleCall_11_1() { return cExprParserRuleCall_11_1; }

		//')'
		public Keyword getRightParenthesisKeyword_11_2() { return cRightParenthesisKeyword_11_2; }
	}

	public class LiteralExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.LiteralExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cUnitAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cUnitUnitDefCrossReference_0_2_0 = (CrossReference)cUnitAssignment_0_2.eContents().get(0);
		private final RuleCall cUnitUnitDefIDTerminalRuleCall_0_2_0_1 = (RuleCall)cUnitUnitDefCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueBOOLParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueREALParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Assignment cUnitAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cUnitUnitDefCrossReference_2_2_0 = (CrossReference)cUnitAssignment_2_2.eContents().get(0);
		private final RuleCall cUnitUnitDefIDTerminalRuleCall_2_2_0_1 = (RuleCall)cUnitUnitDefCrossReference_2_2_0.eContents().get(1);
		
		//LiteralExpr:
		//	{IntLiteral} value=INT unit=[UnitDef]?
		//	| {BoolLiteral} value=BOOL
		//	| {RealLiteral} value=REAL unit=[UnitDef]?;
		@Override public ParserRule getRule() { return rule; }

		//{IntLiteral} value=INT unit=[UnitDef]? | {BoolLiteral} value=BOOL | {RealLiteral} value=REAL unit=[UnitDef]?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntLiteral} value=INT unit=[UnitDef]?
		public Group getGroup_0() { return cGroup_0; }

		//{IntLiteral}
		public Action getIntLiteralAction_0_0() { return cIntLiteralAction_0_0; }

		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }

		//unit=[UnitDef]?
		public Assignment getUnitAssignment_0_2() { return cUnitAssignment_0_2; }

		//[UnitDef]
		public CrossReference getUnitUnitDefCrossReference_0_2_0() { return cUnitUnitDefCrossReference_0_2_0; }

		//ID
		public RuleCall getUnitUnitDefIDTerminalRuleCall_0_2_0_1() { return cUnitUnitDefIDTerminalRuleCall_0_2_0_1; }

		//{BoolLiteral} value=BOOL
		public Group getGroup_1() { return cGroup_1; }

		//{BoolLiteral}
		public Action getBoolLiteralAction_1_0() { return cBoolLiteralAction_1_0; }

		//value=BOOL
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//BOOL
		public RuleCall getValueBOOLParserRuleCall_1_1_0() { return cValueBOOLParserRuleCall_1_1_0; }

		//{RealLiteral} value=REAL unit=[UnitDef]?
		public Group getGroup_2() { return cGroup_2; }

		//{RealLiteral}
		public Action getRealLiteralAction_2_0() { return cRealLiteralAction_2_0; }

		//value=REAL
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//REAL
		public RuleCall getValueREALParserRuleCall_2_1_0() { return cValueREALParserRuleCall_2_1_0; }

		//unit=[UnitDef]?
		public Assignment getUnitAssignment_2_2() { return cUnitAssignment_2_2; }

		//[UnitDef]
		public CrossReference getUnitUnitDefCrossReference_2_2_0() { return cUnitUnitDefCrossReference_2_2_0; }

		//ID
		public RuleCall getUnitUnitDefIDTerminalRuleCall_2_2_0_1() { return cUnitUnitDefIDTerminalRuleCall_2_2_0_1; }
	}

	public class IdRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.IdRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMacroParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//IdRef:
		//	Variable
		//	| Macro
		//	| Constant
		//	| EnumValue;
		@Override public ParserRule getRule() { return rule; }

		//Variable | Macro | Constant | EnumValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//Macro
		public RuleCall getMacroParserRuleCall_1() { return cMacroParserRuleCall_1; }

		//Constant
		public RuleCall getConstantParserRuleCall_2() { return cConstantParserRuleCall_2; }

		//EnumValue
		public RuleCall getEnumValueParserRuleCall_3() { return cEnumValueParserRuleCall_3; }
	}

	public class RecordFieldExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.RecordFieldExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//RecordFieldExpr:
		//	name=ID '=' expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//name=ID '=' expr=Expr
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }
	}

	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLEAN_TRUEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBOOLEAN_FALSEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BOOL:
		//	BOOLEAN_TRUE | BOOLEAN_FALSE;
		@Override public ParserRule getRule() { return rule; }

		//BOOLEAN_TRUE | BOOLEAN_FALSE
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOLEAN_TRUE
		public RuleCall getBOOLEAN_TRUEParserRuleCall_0() { return cBOOLEAN_TRUEParserRuleCall_0; }

		//BOOLEAN_FALSE
		public RuleCall getBOOLEAN_FALSEParserRuleCall_1() { return cBOOLEAN_FALSEParserRuleCall_1; }
	}

	public class BOOLEAN_TRUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.BOOLEAN_TRUE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTRUEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTrueKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN_TRUE:
		//	'TRUE' | 'true';
		@Override public ParserRule getRule() { return rule; }

		//'TRUE' | 'true'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'TRUE'
		public Keyword getTRUEKeyword_0() { return cTRUEKeyword_0; }

		//'true'
		public Keyword getTrueKeyword_1() { return cTrueKeyword_1; }
	}

	public class BOOLEAN_FALSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.BOOLEAN_FALSE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFALSEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN_FALSE:
		//	'FALSE' | 'false';
		@Override public ParserRule getRule() { return rule; }

		//'FALSE' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'FALSE'
		public Keyword getFALSEKeyword_0() { return cFALSEKeyword_0; }

		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.rockwellcollins.Spear.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }

		//INT '.' INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private final FileElements pFile;
	private final SpecificationElements pSpecification;
	private final ImportElements pImport;
	private final DefinitionsElements pDefinitions;
	private final PatternsElements pPatterns;
	private final PatternElements pPattern;
	private final UnitDefElements pUnitDef;
	private final UnitExprElements pUnitExpr;
	private final ProductUnitExprElements pProductUnitExpr;
	private final DivisionUnitExprElements pDivisionUnitExpr;
	private final AtomicUnitExprElements pAtomicUnitExpr;
	private final TypeDefElements pTypeDef;
	private final RecordTypeFieldElements pRecordTypeField;
	private final EnumValueElements pEnumValue;
	private final TypeElements pType;
	private final IdTypeDelimiterElements pIdTypeDelimiter;
	private final ConstantElements pConstant;
	private final VariableElements pVariable;
	private final MacroElements pMacro;
	private final ConstraintElements pConstraint;
	private final FormalConstraintElements pFormalConstraint;
	private final EnglishConstraintElements pEnglishConstraint;
	private final ExprElements pExpr;
	private final ImpliesExprElements pImpliesExpr;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final TriggersExprElements pTriggersExpr;
	private final SinceExprElements pSinceExpr;
	private final TemporalPrefixExprElements pTemporalPrefixExpr;
	private final RelationalExprElements pRelationalExpr;
	private final RelationalOpElements pRelationalOp;
	private final PlusExprElements pPlusExpr;
	private final MultiplyExprElements pMultiplyExpr;
	private final PrefixExprElements pPrefixExpr;
	private final AccessExprElements pAccessExpr;
	private final AtomicExprElements pAtomicExpr;
	private final LiteralExprElements pLiteralExpr;
	private final IdRefElements pIdRef;
	private final RecordFieldExprElements pRecordFieldExpr;
	private final BOOLElements pBOOL;
	private final BOOLEAN_TRUEElements pBOOLEAN_TRUE;
	private final BOOLEAN_FALSEElements pBOOLEAN_FALSE;
	private final REALElements pREAL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpearGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFile = new FileElements();
		this.pSpecification = new SpecificationElements();
		this.pImport = new ImportElements();
		this.pDefinitions = new DefinitionsElements();
		this.pPatterns = new PatternsElements();
		this.pPattern = new PatternElements();
		this.pUnitDef = new UnitDefElements();
		this.pUnitExpr = new UnitExprElements();
		this.pProductUnitExpr = new ProductUnitExprElements();
		this.pDivisionUnitExpr = new DivisionUnitExprElements();
		this.pAtomicUnitExpr = new AtomicUnitExprElements();
		this.pTypeDef = new TypeDefElements();
		this.pRecordTypeField = new RecordTypeFieldElements();
		this.pEnumValue = new EnumValueElements();
		this.pType = new TypeElements();
		this.pIdTypeDelimiter = new IdTypeDelimiterElements();
		this.pConstant = new ConstantElements();
		this.pVariable = new VariableElements();
		this.pMacro = new MacroElements();
		this.pConstraint = new ConstraintElements();
		this.pFormalConstraint = new FormalConstraintElements();
		this.pEnglishConstraint = new EnglishConstraintElements();
		this.pExpr = new ExprElements();
		this.pImpliesExpr = new ImpliesExprElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pTriggersExpr = new TriggersExprElements();
		this.pSinceExpr = new SinceExprElements();
		this.pTemporalPrefixExpr = new TemporalPrefixExprElements();
		this.pRelationalExpr = new RelationalExprElements();
		this.pRelationalOp = new RelationalOpElements();
		this.pPlusExpr = new PlusExprElements();
		this.pMultiplyExpr = new MultiplyExprElements();
		this.pPrefixExpr = new PrefixExprElements();
		this.pAccessExpr = new AccessExprElements();
		this.pAtomicExpr = new AtomicExprElements();
		this.pLiteralExpr = new LiteralExprElements();
		this.pIdRef = new IdRefElements();
		this.pRecordFieldExpr = new RecordFieldExprElements();
		this.pBOOL = new BOOLElements();
		this.pBOOLEAN_TRUE = new BOOLEAN_TRUEElements();
		this.pBOOLEAN_FALSE = new BOOLEAN_FALSEElements();
		this.pREAL = new REALElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.rockwellcollins.Spear".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//File:
	//	Specification | Definitions | Patterns;
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	//Specification:
	//	'Specification' name=ID ('Imports:' imports+=Import*)? ('Units:' units+=UnitDef*)? ('Types:' typedefs+=TypeDef*)?
	//	('Constants:' constants+=Constant*)?
	//	'Inputs:' inputs+=Variable*
	//	'Outputs:' outputs+=Variable* ('State:' state+=Variable*)? ('Macros:' macros+=Macro*)? ('Assumptions:'
	//	assumptions+=Constraint*)?
	//	'DerivedRequirements:' requirements+=Constraint* ('Requirements:' behaviors+=Constraint*)?;
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	//Import:
	//	'import' importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Definitions:
	//	'Definitions' name=ID ('Units:' unitdefs+=UnitDef*)? ('Types:' typedefs+=TypeDef*)? ('Constants:'
	//	constants+=Constant*)?;
	public DefinitionsElements getDefinitionsAccess() {
		return pDefinitions;
	}
	
	public ParserRule getDefinitionsRule() {
		return getDefinitionsAccess().getRule();
	}

	//Patterns:
	//	'Patterns' name=ID patterns+=Pattern*;
	public PatternsElements getPatternsAccess() {
		return pPatterns;
	}
	
	public ParserRule getPatternsRule() {
		return getPatternsAccess().getRule();
	}

	//Pattern:
	//	'Pattern' name=ID;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}

	//UnitDef:
	//	{BaseUnit} name=ID description=STRING?
	//	| {DerivedUnit} name=ID IdTypeDelimiter unit=UnitExpr description=STRING?;
	public UnitDefElements getUnitDefAccess() {
		return pUnitDef;
	}
	
	public ParserRule getUnitDefRule() {
		return getUnitDefAccess().getRule();
	}

	//UnitExpr:
	//	ProductUnitExpr;
	public UnitExprElements getUnitExprAccess() {
		return pUnitExpr;
	}
	
	public ParserRule getUnitExprRule() {
		return getUnitExprAccess().getRule();
	}

	//ProductUnitExpr UnitExpr:
	//	DivisionUnitExpr (=> ({BinaryUnitExpr.left=current} op='*') right=ProductUnitExpr)?
	public ProductUnitExprElements getProductUnitExprAccess() {
		return pProductUnitExpr;
	}
	
	public ParserRule getProductUnitExprRule() {
		return getProductUnitExprAccess().getRule();
	}

	//DivisionUnitExpr UnitExpr:
	//	AtomicUnitExpr (=> ({BinaryUnitExpr.left=current} op='/') right=AtomicUnitExpr)?
	public DivisionUnitExprElements getDivisionUnitExprAccess() {
		return pDivisionUnitExpr;
	}
	
	public ParserRule getDivisionUnitExprRule() {
		return getDivisionUnitExprAccess().getRule();
	}

	//AtomicUnitExpr UnitExpr:
	//	{NamedUnitExpr} unit=[UnitDef] | '(' UnitExpr ')'
	public AtomicUnitExprElements getAtomicUnitExprAccess() {
		return pAtomicUnitExpr;
	}
	
	public ParserRule getAtomicUnitExprRule() {
		return getAtomicUnitExprAccess().getRule();
	}

	//TypeDef:
	//	{NamedType} name=ID IdTypeDelimiter type=Type unit=[UnitDef]?
	//	| {RecordType} name=ID IdTypeDelimiter 'record' '{' fields+=RecordTypeField (',' fields+=RecordTypeField)* '}'
	//	| {ArrayType} name=ID IdTypeDelimiter base=Type '[' size=INT ']'
	//	| {EnumType} name=ID IdTypeDelimiter 'enum' '{' values+=EnumValue (',' values+=EnumValue)* '}';
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//RecordTypeField:
	//	name=ID ':' type=Type;
	public RecordTypeFieldElements getRecordTypeFieldAccess() {
		return pRecordTypeField;
	}
	
	public ParserRule getRecordTypeFieldRule() {
		return getRecordTypeFieldAccess().getRule();
	}

	//EnumValue:
	//	name=ID;
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}

	//Type:
	//	{IntType} 'int'
	//	| {BoolType} 'bool'
	//	| {RealType} 'real'
	//	| {UserType} def=[TypeDef];
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//IdTypeDelimiter:
	//	':'
	//	| 'is a'
	//	| 'is an';
	public IdTypeDelimiterElements getIdTypeDelimiterAccess() {
		return pIdTypeDelimiter;
	}
	
	public ParserRule getIdTypeDelimiterRule() {
		return getIdTypeDelimiterAccess().getRule();
	}

	//Constant:
	//	name=ID IdTypeDelimiter type=Type '=' expr=Expr;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Variable:
	//	name=ID IdTypeDelimiter type=Type;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Macro:
	//	name=ID IdTypeDelimiter type=Type '=' expr=Expr;
	public MacroElements getMacroAccess() {
		return pMacro;
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}

	//Constraint:
	//	FormalConstraint | EnglishConstraint;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//FormalConstraint:
	//	name=ID '=' expr=Expr ('text' '=' descriptor=STRING)?;
	public FormalConstraintElements getFormalConstraintAccess() {
		return pFormalConstraint;
	}
	
	public ParserRule getFormalConstraintRule() {
		return getFormalConstraintAccess().getRule();
	}

	//EnglishConstraint:
	//	name=ID '=' text=STRING;
	public EnglishConstraintElements getEnglishConstraintAccess() {
		return pEnglishConstraint;
	}
	
	public ParserRule getEnglishConstraintRule() {
		return getEnglishConstraintAccess().getRule();
	}

	/// * Begin Expr Language * / Expr:
	//	ImpliesExpr;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ImpliesExpr Expr:
	//	OrExpr (=> ({BinaryExpr.left=current} op=('=>' | 'implies')) right=ImpliesExpr)?
	public ImpliesExprElements getImpliesExprAccess() {
		return pImpliesExpr;
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//OrExpr Expr:
	//	AndExpr (=> ({BinaryExpr.left=current} op=('or' | 'xor')) right=ImpliesExpr)?
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr Expr:
	//	TriggersExpr (=> ({BinaryExpr.left=current} op='and') right=AndExpr)?
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//TriggersExpr Expr:
	//	SinceExpr (=> ({BinaryExpr.left=current} op=('T' | 'triggers')) right=TriggersExpr)?
	public TriggersExprElements getTriggersExprAccess() {
		return pTriggersExpr;
	}
	
	public ParserRule getTriggersExprRule() {
		return getTriggersExprAccess().getRule();
	}

	//SinceExpr Expr:
	//	TemporalPrefixExpr (=> ({BinaryExpr.left=current} op=('S' | 'since')) right=SinceExpr)?
	public SinceExprElements getSinceExprAccess() {
		return pSinceExpr;
	}
	
	public ParserRule getSinceExprRule() {
		return getSinceExprAccess().getRule();
	}

	//TemporalPrefixExpr Expr:
	//	{UnaryExpr} op=('O' | 'once' | 'H' | 'historically' | 'never' | 'before' | 'initially') expr=TemporalPrefixExpr
	//	| RelationalExpr
	public TemporalPrefixExprElements getTemporalPrefixExprAccess() {
		return pTemporalPrefixExpr;
	}
	
	public ParserRule getTemporalPrefixExprRule() {
		return getTemporalPrefixExprAccess().getRule();
	}

	//RelationalExpr Expr:
	//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=RelationalExpr)?
	public RelationalExprElements getRelationalExprAccess() {
		return pRelationalExpr;
	}
	
	public ParserRule getRelationalExprRule() {
		return getRelationalExprAccess().getRule();
	}

	////This adds some english equivalents to the Relational Operators for a more english look and feel
	//RelationalOp:
	//	'<' | 'less' 'than'
	//	| '<=' | 'less' 'than' 'or' 'equal' 'to'
	//	| '>' | 'greater' 'than'
	//	| '>=' | 'greater' 'than' 'or' 'equal' 'to'
	//	| '==' | 'equal' 'to'
	//	| '<>' | 'not' 'equal' 'to';
	public RelationalOpElements getRelationalOpAccess() {
		return pRelationalOp;
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	//PlusExpr Expr:
	//	MultiplyExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=PlusExpr)?
	public PlusExprElements getPlusExprAccess() {
		return pPlusExpr;
	}
	
	public ParserRule getPlusExprRule() {
		return getPlusExprAccess().getRule();
	}

	//MultiplyExpr Expr:
	//	PrefixExpr (=> ({BinaryExpr.left=current} op=('*' | '/')) right=MultiplyExpr)?
	public MultiplyExprElements getMultiplyExprAccess() {
		return pMultiplyExpr;
	}
	
	public ParserRule getMultiplyExprRule() {
		return getMultiplyExprAccess().getRule();
	}

	////the sugary Unary operators are never, before, after (the last three)
	//// | 'O' | 'once' | 'H' | 'historically' | 'never' | 'before' | 'after'
	//PrefixExpr Expr:
	//	{UnaryExpr} op=('-' | 'not') expr=PrefixExpr
	//	| AccessExpr
	public PrefixExprElements getPrefixExprAccess() {
		return pPrefixExpr;
	}
	
	public ParserRule getPrefixExprRule() {
		return getPrefixExprAccess().getRule();
	}

	//AccessExpr Expr:
	//	AtomicExpr (=> ({RecordAccessExpr.record=current} '.') field=[RecordFieldExpr] | =>
	//	({RecordUpdateExpr.record=current} '{' field=[RecordFieldExpr] ':=') value=Expr '}'
	//	| => ({ArrayAccessExpr.array=current} '[') index=Expr (=> ({ArrayUpdateExpr.access=current} ':=') value=Expr)? ']')*
	public AccessExprElements getAccessExprAccess() {
		return pAccessExpr;
	}
	
	public ParserRule getAccessExprRule() {
		return getAccessExprAccess().getRule();
	}

	//AtomicExpr Expr:
	//	LiteralExpr
	//	| {IdExpr} id=[IdRef] | {MIdExpr} '|' ids+=[IdRef] (',' ids+=[IdRef])* '|'
	//	| {PreviousExpr} 'prev' '(' var=Expr ',' init=Expr ')'
	//	| {IfThenElseExpr} 'if' cond=Expr 'then' then=Expr (=> 'else' else=Expr)?
	//	| {AfterUntilExpr} 'after' after=Expr (=> 'until' until=Expr)?
	//	| {WhileExpr} 'while' cond=Expr 'then' then=Expr
	//	| {RecordExpr} 'new' type=[RecordType] '{' fieldExprs+=RecordFieldExpr (',' fieldExprs+=RecordFieldExpr)* '}'
	//	| {ArrayExpr} 'new' type=[ArrayType] '[' exprs+=Expr (',' exprs+=Expr)* ']'
	//	| {PatternCall} 'pattern' pattern=[Pattern] '(' args+=Expr (',' args+=Expr)* ')'
	//	| {SpecificationCall} 'spec' spec=[Specification] '(' args+=Expr (',' args+=Expr)* ')'
	//	| '(' Expr ')'
	public AtomicExprElements getAtomicExprAccess() {
		return pAtomicExpr;
	}
	
	public ParserRule getAtomicExprRule() {
		return getAtomicExprAccess().getRule();
	}

	//LiteralExpr:
	//	{IntLiteral} value=INT unit=[UnitDef]?
	//	| {BoolLiteral} value=BOOL
	//	| {RealLiteral} value=REAL unit=[UnitDef]?;
	public LiteralExprElements getLiteralExprAccess() {
		return pLiteralExpr;
	}
	
	public ParserRule getLiteralExprRule() {
		return getLiteralExprAccess().getRule();
	}

	//IdRef:
	//	Variable
	//	| Macro
	//	| Constant
	//	| EnumValue;
	public IdRefElements getIdRefAccess() {
		return pIdRef;
	}
	
	public ParserRule getIdRefRule() {
		return getIdRefAccess().getRule();
	}

	//RecordFieldExpr:
	//	name=ID '=' expr=Expr;
	public RecordFieldExprElements getRecordFieldExprAccess() {
		return pRecordFieldExpr;
	}
	
	public ParserRule getRecordFieldExprRule() {
		return getRecordFieldExprAccess().getRule();
	}

	//BOOL:
	//	BOOLEAN_TRUE | BOOLEAN_FALSE;
	public BOOLElements getBOOLAccess() {
		return pBOOL;
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}

	//BOOLEAN_TRUE:
	//	'TRUE' | 'true';
	public BOOLEAN_TRUEElements getBOOLEAN_TRUEAccess() {
		return pBOOLEAN_TRUE;
	}
	
	public ParserRule getBOOLEAN_TRUERule() {
		return getBOOLEAN_TRUEAccess().getRule();
	}

	//BOOLEAN_FALSE:
	//	'FALSE' | 'false';
	public BOOLEAN_FALSEElements getBOOLEAN_FALSEAccess() {
		return pBOOLEAN_FALSE;
	}
	
	public ParserRule getBOOLEAN_FALSERule() {
		return getBOOLEAN_FALSEAccess().getRule();
	}

	//REAL:
	//	INT '.' INT;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
