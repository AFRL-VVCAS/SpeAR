Specification preds

Units:
	m 'meters'
	deg 'degrees'

Types:
	distance : real m
	degrees : real deg
	
	degrees_alt: {d : degrees | 0.0 deg < d and d < 360.0 deg}
	degrees_alt2: {d : real | 0.0  < d and d < 360.0 } deg
	
	/* this looks to work with records */
	coordinate: record {x : distance, y : distance}
	quadrant1 : {co : coordinate | co.x > 0.0 m and co.y > 0.0 m}
	quadrant2 : {co : coordinate | co.x < 0.0 m and co.y > 0.0 m}
	why_would_you_do_this: {co : coordinate | co.x > 0.0 m implies co.y > 0.0 m}
	
	posreal: {r : real | r > 0.0} 
	posint: {i : int | i > 0}
	
	/* not much else I can do with arrays since our array expression 
	 * language (and JKind's is fairly limited)  */
	list: posint[3]
	
Inputs:
	da1 : degrees_alt
	da2 : degrees_alt2
	
	s : coordinate
	t : quadrant1
	u : quadrant2
	v : why_would_you_do_this
	x : posreal
	y : posint
	z : list
	
Outputs:
	//does not conflict in scope with the variable defined in degrees_alt or degrees alt2
	d : int
	c1 : coordinate
	c2 : quadrant1
	c3 : quadrant2
	x_out : posreal
	y_out : posint

State:
	state1 : why_would_you_do_this
	z_state : list

Macros:
	m1 : quadrant2 = s { x := u.x }{ y := t.y }

Assumptions:
	//autogenerated
	da1_pred_satisfied: 0.0 deg < da1 and da1 < 360.0 deg
	da2_pred_satisfied: 0.0 deg < da2 and da2 < 360.0 deg
	t_pred_satisfied: t.x > 0.0 m and t.y > 0.0 m
	u_pred_satisfied: u.x < 0.0 m and u.y > 0.0 m
	v_pred_satisfied: v.x > 0.0 m implies v.y > 0.0 m
	x_pred_satisfied: x > 0.0
	y_pred_satisfied: y > 0
	
	//this is awful
	z_pred_satisfied: z[0] > 0  and z[1] > 0 and z[2] > 0

Requirements:
	//should this be allowed?
	r0: c1 == c2
	r1: state1 == v { x := m1.x }
	r2: x_out == x - 1.5
	r3: y_out == y + 232342323
	r4: z_state == z [0 := 5][1 := 23]

Properties:
	//autogenerated
	m1_pred_satisifed: m1.x < 0.0 m and m1.y > 0.0 m
	c2_pred_satisfied: c2.x > 0.0 m and c2.y > 0.0 m
	c3_pred_satisfied: c3.x < 0.0 m and c3.y > 0.0 m
	x_out_pred_satisfied: x_out > 0.0
	y_out_pred_satsified: y_out > 0
	state1_pred_satisfied: state1.x > 0.0 m implies state1.y > 0.0 m
	z_state_pred_satisifed: z_state[0] > 0 and z_state[1] > 0 and z_state[2] > 0

