type record_scoping_record_type1 = struct {a : int; b : int};
type record_scoping_record_type2 = struct {a : real; b : real};
type record_scoping_enum1_ = enum {enum1__A, enum1__B, enum1__C};
type record_scoping_enum2_ = enum {enum2__D, enum2__E, enum2__F};
type import_definitions_recordA = struct {a : bool; b : bool};

const import_definitions_c1 = 5.1;

node initially(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal -> true);

tel;

node historically(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal and (true -> (pre holds)));

tel;

node once(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal or (false -> (pre holds)));

tel;

node since(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b or (a and (false -> (pre holds))));

tel;

node triggers(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b and (a or (false -> (pre holds))));

tel;

node record_scoping(
  a : record_scoping_record_type1;
  b : record_scoping_record_type2;
  c : record_scoping_enum1_;
  d : record_scoping_enum2_;
  t : import_definitions_recordA;
  q_shadow : int;
  r_shadow : real;
  x_shadow : int;
  y_shadow : real
) returns (
  x : int;
  y : real
);
var
  q : int;
  r : real;
  m1 : int;
  m2 : real;
  m3 : bool;
  m4 : bool;
  m5 : bool;
  a0 : bool;
  a1 : bool;
  dr0 : bool;
  dr1 : bool;
  CONJUNCT : bool;
  HISTORICAL_CONJUNCT : bool;
let
  --%MAIN
  q = q_shadow;

  r = r_shadow;

  x = x_shadow;

  y = y_shadow;

  m1 = a.a;

  m2 = (b.a + import_definitions_c1);

  m3 = (c = enum1__A);

  m4 = (d = enum2__D);

  m5 = t.a;

  a0 = (m1 > 0);

  a1 = (m2 > 0.0);

  dr0 = (x = (m1 + a.b));

  dr1 = (y = (m2 + b.b));

  CONJUNCT = (a0 and (a1 and (dr0 and dr1)));

  HISTORICAL_CONJUNCT = historically(CONJUNCT);

  property = CONJUNCT = FALSE;
  
tel;
