type import_definitions_typeA = real;

const simple_c2 = 5.2;
const import_definitions_c1 = 5.1;

node initially(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal -> true);

tel;

node historically(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal and (true -> (pre holds)));

tel;

node once(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal or (false -> (pre holds)));

tel;

node since(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b or (a and (false -> (pre holds))));

tel;

node triggers(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b and (a or (false -> (pre holds))));

tel;

node simple(
  a : import_definitions_typeA;
  b : real;
  q_shadow : real;
  z_shadow : real
) returns (
  z : real
);
var
  q : real;
  m1 : real;
  a0 : bool;
  a1 : bool;
  qr0 : bool;
  zr0 : bool;
  CONJUNCT : bool;
  HISTORICAL_CONJUNCT : bool;
  p0 : bool;
  p0_PROP : bool;
let
  --%MAIN
  q = q_shadow;

  z = z_shadow;

  m1 = (import_definitions_c1 + simple_c2);

  a0 = (a > 0.0);

  a1 = (b <= 0.0);

  qr0 = (q = (a + b));

  zr0 = (z = (a + (b + (import_definitions_c1 + m1))));

  CONJUNCT = (a0 and (a1 and (qr0 and zr0)));

  HISTORICAL_CONJUNCT = historically(CONJUNCT);

  p0 = ((z - q) > 0.0);

  p0_PROP = (HISTORICAL_CONJUNCT => p0);

  --%PROPERTY p0_PROP;

tel;
